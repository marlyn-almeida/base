CREATE TABLE [dbo].[Base_Servidores] (
    [ID_Base_Servidor] INT IDENTITY(1,1) NOT NULL,
    [ID_Base] INT NOT NULL,
    [ID_Servidor] INT NOT NULL,
    [Fecha_Inicio_B] DATETIME NOT NULL DEFAULT GETDATE(),
    [Fecha_Fin_B] DATETIME NULL,
    [Estado_Asignacion] VARCHAR(20) NOT NULL DEFAULT 'activo',
    CONSTRAINT [PK_Base_Servidores] PRIMARY KEY CLUSTERED ([ID_Base_Servidor]),
    CONSTRAINT [FK_Base_Servidores_Base] FOREIGN KEY ([ID_Base]) REFERENCES [dbo].[BaseDatos] ([ID_Base]),
    CONSTRAINT [FK_Base_Servidores_Servidor] FOREIGN KEY ([ID_Servidor]) REFERENCES [dbo].[Servidores] ([ID_Servidor]),
    CONSTRAINT [CK_Estado_Asignacion] CHECK ([Estado_Asignacion] IN ('activo', 'inactivo'))
)
GO



CREATE TABLE [dbo].[Auxiliar_Base] (
    [ID_Auxiliar_Base] INT IDENTITY(1,1) NOT NULL,
    [ID_Base] INT NOT NULL,
    [empcodigo] INT NOT NULL,
    [Tipo_Auxiliar] VARCHAR(20) NOT NULL, -- 'principal' o 'secundario'
    [Fecha_Asignacion] DATETIME NOT NULL DEFAULT GETDATE(),
    [Fecha_Desasignacion] DATETIME NULL,
    [Estado_Auxiliar] VARCHAR(20) NOT NULL DEFAULT 'activo',
    CONSTRAINT [PK_Auxiliar_Base] PRIMARY KEY CLUSTERED ([ID_Auxiliar_Base]),
    CONSTRAINT [FK_Auxiliar_Base_Base] FOREIGN KEY ([ID_Base]) REFERENCES [dbo].[BaseDatos] ([ID_Base]),
    CONSTRAINT [FK_Auxiliar_Base_Empleado] FOREIGN KEY ([empcodigo]) REFERENCES [dbo].[empleado] ([empcodigo]),
    CONSTRAINT [CK_Tipo_Auxiliar] CHECK ([Tipo_Auxiliar] IN ('principal', 'secundario')),
    CONSTRAINT [CK_Estado_Auxiliar] CHECK ([Estado_Auxiliar] IN ('activo', 'inactivo'))
)
GO



-- 1. Eliminar la restricciÃ³n de clave forÃ¡nea
ALTER TABLE [dbo].[BaseDatos] DROP CONSTRAINT [FK_BaseDatos_Servidores];
GO

-- 2. Eliminar las columnas obsoletas
ALTER TABLE [dbo].[BaseDatos]
DROP COLUMN [empcodigo], [ID_Servidor];
GO






USE [MSQCATPRO_MA]
GO

-- ðŸ”¹ Crear o actualizar base de datos
CREATE OR ALTER PROCEDURE [dbo].[InsertBaseDatos]
    @Nombre_Base VARCHAR(100),
    @Nombre_Instancia VARCHAR(100),
    @Tipo_Base VARCHAR(50),
    @Descripcion VARCHAR(300)
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO BaseDatos (
        Nombre_Base,
        Nombre_Instancia,
        Tipo_Base,
        Descripcion
    )
    VALUES (
        @Nombre_Base,
        @Nombre_Instancia,
        @Tipo_Base,
        @Descripcion
    );
END
GO

-- ðŸ”¹ Actualizar base existente
CREATE OR ALTER PROCEDURE [dbo].[UpdateBaseDatos]
    @ID_Base INT,
    @Nombre_Base VARCHAR(100),
    @Nombre_Instancia VARCHAR(100),
    @Tipo_Base VARCHAR(50),
    @Descripcion VARCHAR(300)
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE BaseDatos
    SET Nombre_Base = @Nombre_Base,
        Nombre_Instancia = @Nombre_Instancia,
        Tipo_Base = @Tipo_Base,
        Descripcion = @Descripcion
    WHERE ID_Base = @ID_Base;
END
GO

-- ðŸ”¹ Eliminar base
CREATE OR ALTER PROCEDURE [dbo].[DeleteBaseDatos]
    @ID_Base INT
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM BaseDatos WHERE ID_Base = @ID_Base;
END
GO

-- ðŸ”¹ Obtener todas las bases
CREATE OR ALTER PROCEDURE [dbo].[GetAllBasesDatos]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT * FROM BaseDatos ORDER BY Nombre_Base;
END
GO

-- ðŸ”¹ Obtener detalle extendido por ID
CREATE OR ALTER PROCEDURE [dbo].[GetBaseDetalle]
    @ID_Base INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        B.ID_Base,
        B.Nombre_Base,
        B.Nombre_Instancia,
        B.Tipo_Base,
        B.Descripcion,
        S.Nombre_Servidor,
        S.fech_despliegue AS Fecha_Despliegue,
        E.empnombres + ' ' + E.empapellidopaterno AS Auxiliar_Principal
    FROM BaseDatos B
    LEFT JOIN Base_Servidores BS ON B.ID_Base = BS.ID_Base AND BS.Estado_Asignacion = 'activo'
    LEFT JOIN Servidores S ON BS.ID_Servidor = S.ID_Servidor
    LEFT JOIN Auxiliar_Base AB ON B.ID_Base = AB.ID_Base AND AB.Tipo_Auxiliar = 'principal' AND AB.Estado_Auxiliar = 'activo'
    LEFT JOIN empleado E ON AB.empcodigo = E.empcodigo
    WHERE B.ID_Base = @ID_Base;
END
GO

-- ðŸ”¹ Asignar base a servidor
CREATE OR ALTER PROCEDURE [dbo].[AssignBaseToServer]
    @ID_Base INT,
    @ID_Servidor INT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM BaseDatos WHERE ID_Base = @ID_Base)
    BEGIN
        RAISERROR('La base de datos no existe.', 16, 1);
        RETURN;
    END

    IF NOT EXISTS (SELECT 1 FROM Servidores WHERE ID_Servidor = @ID_Servidor)
    BEGIN
        RAISERROR('El servidor no existe.', 16, 1);
        RETURN;
    END

    IF EXISTS (
        SELECT 1 FROM Base_Servidores
        WHERE ID_Base = @ID_Base AND ID_Servidor = @ID_Servidor AND Estado_Asignacion = 'activo'
    )
    BEGIN
        RAISERROR('La base ya estÃ¡ asignada a este servidor.', 16, 1);
        RETURN;
    END

    INSERT INTO Base_Servidores (ID_Base, ID_Servidor)
    VALUES (@ID_Base, @ID_Servidor);
END
GO

-- ðŸ”¹ Desasignar base de servidor
CREATE OR ALTER PROCEDURE [dbo].[DesasignarBaseDeServidor]
    @ID_Base INT,
    @ID_Servidor INT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (
        SELECT 1 FROM Base_Servidores
        WHERE ID_Base = @ID_Base AND ID_Servidor = @ID_Servidor AND Estado_Asignacion = 'activo'
    )
    BEGIN
        RAISERROR('No existe una asignaciÃ³n activa entre esta base y este servidor.', 16, 1);
        RETURN;
    END

    UPDATE Base_Servidores
    SET Estado_Asignacion = 'inactivo',
        Fecha_Fin_B = GETDATE()
    WHERE ID_Base = @ID_Base AND ID_Servidor = @ID_Servidor AND Estado_Asignacion = 'activo';
END
GO

-- ðŸ”¹ Asignar auxiliar tÃ©cnico
CREATE OR ALTER PROCEDURE [dbo].[AssignAuxiliarToBase]
    @ID_Base INT,
    @empcodigo INT,
    @Tipo_Auxiliar VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM BaseDatos WHERE ID_Base = @ID_Base)
    BEGIN
        RAISERROR('La base de datos no existe.', 16, 1);
        RETURN;
    END

    IF NOT EXISTS (SELECT 1 FROM empleado WHERE empcodigo = @empcodigo)
    BEGIN
        RAISERROR('El empleado no existe.', 16, 1);
        RETURN;
    END

    UPDATE Auxiliar_Base
    SET Estado_Auxiliar = 'inactivo',
        Fecha_Desasignacion = GETDATE()
    WHERE ID_Base = @ID_Base AND Tipo_Auxiliar = @Tipo_Auxiliar AND Estado_Auxiliar = 'activo';

    INSERT INTO Auxiliar_Base (ID_Base, empcodigo, Tipo_Auxiliar)
    VALUES (@ID_Base, @empcodigo, @Tipo_Auxiliar);
END
GO

-- ðŸ”¹ Desasignar auxiliar tÃ©cnico
CREATE OR ALTER PROCEDURE [dbo].[DesasignarAuxiliarDeBase]
    @ID_Base INT,
    @Tipo_Auxiliar VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (
        SELECT 1 FROM Auxiliar_Base
        WHERE ID_Base = @ID_Base AND Tipo_Auxiliar = @Tipo_Auxiliar AND Estado_Auxiliar = 'activo'
    )
    BEGIN
        RAISERROR('No existe un auxiliar activo de ese tipo para esta base.', 16, 1);
        RETURN;
    END

    UPDATE Auxiliar_Base
    SET Estado_Auxiliar = 'inactivo',
        Fecha_Desasignacion = GETDATE()
    WHERE ID_Base = @ID_Base AND Tipo_Auxiliar = @Tipo_Auxiliar AND Estado_Auxiliar = 'activo';
END
GO

-- ðŸ”¹ EstadÃ­sticas agregadas
CREATE OR ALTER PROCEDURE [dbo].[GetBaseEstadisticas]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        COUNT(*) AS Total_Bases,
        COUNT(DISTINCT Tipo_Base) AS Tipos_Distintos,
        COUNT(DISTINCT BS.ID_Servidor) AS Servidores_Asignados,
        COUNT(DISTINCT AB.empcodigo) AS Auxiliares_Asignados
    FROM BaseDatos B
    LEFT JOIN Base_Servidores BS ON B.ID_Base = BS.ID_Base AND BS.Estado_Asignacion = 'activo'
    LEFT JOIN Auxiliar_Base AB ON B.ID_Base = AB.ID_Base AND AB.Estado_Auxiliar = 'activo';
END
GO
