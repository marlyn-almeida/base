// Creado por Marlyn Almeida el 18/08/2025
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { ChevronLeftIcon } from '@heroicons/react/24/outline';
import { ActivoFisicoForm, crearActivoFisico } from '../../types/ActivoFisico';

const NuevoActivoFisico: React.FC = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);

  const [formData, setFormData] = useState<ActivoFisicoForm>({
    naturaleza: '',
    nombre: '',
    administrador: '',
    descripcion: '',
    etiqueta: '',
    codigoActivo: '',
    centroCosto: '',
    fabricante: '',
    modelo: '',
    numeroSerie: '',
    numeroContrato: '',
    fechaAdquisicion: '',
    fechaVencimientoGarantia: '',
    zonaId: 0,
    precioCompra: 0,
    ubicacion: '',
    estado: 'Operativo'
  });

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'precioCompra' || name === 'zonaId' ? Number(value) : value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const idInsertado = await crearActivoFisico(formData);
      if (idInsertado !== null) {
        navigate('/activos-fisicos');
      } else {
        alert('Error al registrar el activo físico.');
      }
    } catch (error) {
      console.error('Error al guardar activo físico:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-5xl mx-auto">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center space-x-4 mb-4">
          <button
            onClick={() => navigate('/activos-fisicos')}
            className="flex items-center text-gray-600 hover:text-gray-800 transition-colors"
          >
            <ChevronLeftIcon className="w-5 h-5 mr-1" />
            Volver a Activos Físicos
          </button>
        </div>
        <h1 className="text-3xl font-bold text-gray-800 mb-2">Registrar Nuevo Activo Físico</h1>
        <p className="text-gray-600">Registra un nuevo servidor físico o equipo de infraestructura</p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-8">
        {/* Información Básica */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold mb-4">Información Básica</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {[
              { label: 'Naturaleza', name: 'naturaleza' },
              { label: 'Etiqueta', name: 'etiqueta' },
              { label: 'Código de Activo', name: 'codigoActivo' },
              { label: 'Centro de Costo', name: 'centroCosto' },
              { label: 'Administrador', name: 'administrador' },
              {
                label: 'Estado',
                name: 'estado',
                type: 'select',
                options: ['Operativo', 'Inoperativo', 'En mantenimiento']
              }
            ].map(({ label, name, type, options }) => (
              <div key={name}>
                <label className="block text-sm font-medium text-gray-700 mb-2">{label} *</label>
                {type === 'select' ? (
                  <select
                    name={name}
                    value={formData[name as keyof ActivoFisicoForm] as string}
                    onChange={handleInputChange}
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  >
                    <option value="">Seleccionar...</option>
                    {options!.map(opt => (
                      <option key={opt} value={opt}>{opt}</option>
                    ))}
                  </select>
                ) : (
                  <input
                    type="text"
                    name={name}
                    value={formData[name as keyof ActivoFisicoForm] as string}
                    onChange={handleInputChange}
                    required
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  />
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Detalles Técnicos */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold mb-4">Detalles Técnicos</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {[
              { label: 'Nombre del Activo', name: 'nombre' },
              { label: 'Fabricante', name: 'fabricante' },
              { label: 'Modelo', name: 'modelo' },
              { label: 'Número de Serie', name: 'numeroSerie' },
              { label: 'Número de Contrato', name: 'numeroContrato' },
              { label: 'Zona ID', name: 'zonaId', type: 'number' }
            ].map(({ label, name, type }) => (
              <div key={name}>
                <label className="block text-sm font-medium text-gray-700 mb-2">{label} *</label>
                <input
                  type={type || 'text'}
                  name={name}
                  value={formData[name as keyof ActivoFisicoForm]}
                  onChange={handleInputChange}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                />
              </div>
            ))}
          </div>
        </div>

        {/* Fechas y Ubicación */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold mb-4">Fechas y Ubicación</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Fecha de Adquisición *</label>
              <input
                type="date"
                name="fechaAdquisicion"
                value={formData.fechaAdquisicion}
                onChange={handleInputChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Fecha Vencimiento Garantía</label>
              <input
                type="date"
                name="fechaVencimientoGarantia"
                value={formData.fechaVencimientoGarantia}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">Ubicación *</label>
              <input
                type="text"
                name="ubicacion"
                value={formData.ubicacion}
                onChange={handleInputChange}
                required
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
              />
            </div>
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">Precio de Compra</label>
              <input
                type="number"
                name="precioCompra"
                value={formData.precioCompra}
                onChange={handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg"
              />
            </div>
          </div>
        </div>

        {/* Descripción */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h3 className="text-lg font-semibold mb-4">Descripción</h3>
          <textarea
            name="descripcion"
            value={formData.descripcion}
            onChange={handleInputChange}
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg"
            placeholder="Descripción del activo y su propósito..."
          />
        </div>

        {/* Botones */}
        <div className="flex justify-end space-x-4">
          <button
            type="button"
            onClick={() => navigate('/activos-fisicos')}
            className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
          >
            Cancelar
          </button>
          <button
            type="submit"
            disabled={isLoading}
            className="px-6 py-2 bg-petroecuador-light text-white rounded-lg hover:bg-petroecuador-dark transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isLoading ? 'Guardando...' : 'Registrar Activo'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default NuevoActivoFisico;
