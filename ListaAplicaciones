import React, { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import {
  leerAplicativos,
  obtenerAplicativoPorId,
  Aplicativo
} from '../../types/Aplicaciones';

const ListaAplicaciones: React.FC = () => {
  const [aplicaciones, setAplicaciones] = useState<Aplicativo[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCriticidad, setFilterCriticidad] = useState('');
  const [filterEstado, setFilterEstado] = useState('');
  const [detallesCompletos, setDetallesCompletos] = useState<Aplicativo[]>([]);
  const navigate = useNavigate();

  useEffect(() => {
    leerAplicativos().then(setAplicaciones).catch(console.error);
  }, []);

  const getCriticidadLabel = (criticidadId: number) => {
    switch (criticidadId) {
      case 1: return { label: 'Alta', color: 'bg-red-100 text-red-800' };
      case 2: return { label: 'Media', color: 'bg-yellow-100 text-yellow-800' };
      case 3: return { label: 'Baja', color: 'bg-green-100 text-green-800' };
      default: return { label: 'Sin definir', color: 'bg-gray-100 text-gray-800' };
    }
  };

  const getEstadoLabel = (activo: boolean) => {
    return activo
      ? { label: 'Activa', color: 'bg-green-100 text-green-800' }
      : { label: 'Inactiva', color: 'bg-red-100 text-red-800' };
  };

  const verificarAplicativoAntesDeNavegar = async (id: string) => {
    const data = await obtenerAplicativoPorId(id);
    if (data) {
      navigate(`/aplicaciones/${id}/detalle`);
    } else {
      alert("Aplicativo no encontrado o deshabilitado");
    }
  };

  const filteredAplicaciones = aplicaciones.filter(app => {
    const matchesSearch =
      app.nombreCorto.toLowerCase().includes(searchTerm.toLowerCase()) ||
      app.descripcion.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (app.enlace?.toLowerCase().includes(searchTerm.toLowerCase()) ?? false);

    const matchesCriticidad =
      filterCriticidad === '' || String(app.criticidadId) === filterCriticidad;

    const matchesEstado =
      filterEstado === '' ||
      (filterEstado === 'Activa' && app.activo) ||
      (filterEstado === 'Inactiva' && !app.activo);

    return matchesSearch && matchesCriticidad && matchesEstado;
  });

  useEffect(() => {
    const cargarDetalles = async () => {
      const resultados = await Promise.all(
        filteredAplicaciones.map(app => obtenerAplicativoPorId(app.id))
      );
      setDetallesCompletos(resultados.filter((a): a is Aplicativo => a !== null));
    };

    if (filteredAplicaciones.length > 0) {
      cargarDetalles();
    } else {
      setDetallesCompletos([]);
    }
  }, [filteredAplicaciones]);

  return (
    <div className="max-w-7xl mx-auto">
      {/* Encabezado */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-800 mb-2">Listado de Aplicaciones</h1>
            <p className="text-gray-600">Ver todas las aplicaciones registradas en el sistema</p>
          </div>
          <Link
            to="/aplicaciones/nueva"
            className="bg-green-700 text-white px-4 py-2 rounded-lg hover:bg-green-800 transition-colors"
          >
            Nueva Aplicación
          </Link>
        </div>

        {/* Filtros */}
        <div className="bg-white p-4 rounded-lg shadow-md mb-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Buscar</label>
              <input
                type="text"
                placeholder="Nombre, descripción o enlace..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Criticidad</label>
              <select
                value={filterCriticidad}
                onChange={(e) => setFilterCriticidad(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
              >
                <option value="">Todas</option>
                <option value="1">Alta</option>
                <option value="2">Media</option>
                <option value="3">Baja</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Estado</label>
              <select
                value={filterEstado}
                onChange={(e) => setFilterEstado(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500"
              >
                <option value="">Todos</option>
                <option value="Activa">Activa</option>
                <option value="Inactiva">Inactiva</option>
              </select>
            </div>
            <div className="flex items-end">
              <button
                onClick={() => {
                  setSearchTerm('');
                  setFilterCriticidad('');
                  setFilterEstado('');
                }}
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600"
              >
                Limpiar Filtros
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Estadísticas */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <h3 className="text-lg font-semibold mb-4">Estadísticas de Aplicaciones</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
          <div>
            <div className="text-2xl font-bold text-yellow-600">
              {aplicaciones.filter(a => !a.activo && a.estadoId === 3).length}
            </div>
            <div className="text-sm text-gray-600">En Mantenimiento</div>
          </div>
          <div>
            <div className="text-2xl font-bold text-green-600">
              {aplicaciones.filter(a => a.activo).length}
            </div>
            <div className="text-sm text-gray-600">Activas</div>
          </div>
          <div>
            <div className="text-2xl font-bold text-red-600">
              {aplicaciones.filter(a => !a.activo).length}
            </div>
            <div className="text-sm text-gray-600">Inactivas</div>
          </div>
          <div>
            <div className="text-2xl font-bold text-indigo-600">
              {aplicaciones.length}
            </div>
            <div className="text-sm text-gray-600">Total Registradas</div>
          </div>
        </div>
      </div>

      {/* Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        {detallesCompletos.map((app) => {
          const criticidad = getCriticidadLabel(app.criticidadId);
          const estado = getEstadoLabel(app.activo);

          return (
            <div key={`apl-${app.id}`} className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow">
              <div className="p-6">
                {/* Nombre */}
                <div className="mb-2">
                  <p className="text-xs text-gray-500 mb-1">Nombre:</p>
                  <h3 className="text-lg font-semibold text-gray-800">{app.nombreCorto}</h3>
                </div>

                {/* Criticidad y Estado */}
                <div className="flex space-x-2 mb-4">
                  <span className={`px-2 py-1 text-xs font-semibold rounded-full ${criticidad.color}`}>
                    {criticidad.label}
                  </span>
                  <span className={`px-2 py-1 text-xs font-semibold rounded-full ${estado.color}`}>
                    {estado.label}
                  </span>
                                </div>

                {/* Descripción */}
                <div className="mb-4">
                  <p className="text-xs text-gray-500 mb-1">Descripción:</p>
                  <p className="text-gray-600 text-sm">{app.descripcion}</p>
                </div>

                {/* Enlace */}
                {app.enlace && (
                  <div className="mb-4">
                    <p className="text-xs text-gray-500 mb-1">Enlace:</p>
                    <a
                      href={app.enlace}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-800 text-sm break-all"
                    >
                      {app.enlace}
                    </a>
                  </div>
                )}

                {/* Fecha de registro */}
                <div className="text-xs text-gray-500 mb-4">
                  Registrado: {new Date(app.registro).toLocaleDateString('es-EC')}
                </div>

                {/* Acciones */}
                <div className="flex justify-between items-center">
                  <Link
                    to={`/aplicaciones/${app.id}`}
                    className="text-green-600 hover:text-green-800 text-sm font-medium"
                  >
                    Editar
                  </Link>
                  <button
                    onClick={() => verificarAplicativoAntesDeNavegar(app.id)}
                    className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                  >
                    Ver Detalle
                  </button>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Sin resultados */}
      {detallesCompletos.length === 0 && (
        <div className="bg-white rounded-lg shadow-md p-8 text-center">
          <div className="text-gray-500 text-lg mb-2">No se encontraron aplicaciones</div>
          <p className="text-gray-400">Intenta ajustar los filtros de búsqueda</p>
        </div>
      )}
    </div>
  );
};

export default ListaAplicaciones;
