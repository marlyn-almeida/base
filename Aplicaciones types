// Consolidado por Marlyn Almeida el 19/08/2025
// Incluye tipos, mapeos y funciones API para aplicativos

const API_URL = "http://localhost/aplicativo/backend/Cruds/aplicativo.php";

// üß© Tipos
export type Aplicativo = {
  id: string;
  nombreCorto: string;
  nombreCompleto: string;
  registro: string;
  fechaAdquisicion: string;
  fechaImplementacion: string;
  proveedor: string;
  version: string;
  anioCreacion: number;
  numeroUsuarios: number;
  administradorUsuario: string;
  valorEstimado: number;
  transaccionesMensuales: number;
  fechaActualizacion: string;
  sla: string;
  rutaDocTecnico: string;
  enlace: string;
  tiempoReinicio: string;
  horaReinicio: string;
  activo: boolean;
  descripcion: string;
  observaciones: string;
  soporteVigente: boolean;
  https: boolean;
  areaRequirente: string;
  subarea: string;
  proceso: string;

  // Relaciones externas
  criticidadId: number;
  tipoCriticidadId: number;
  macroprocesoId: number;
  herramientaId: number;
  tipoAccesoId: number;
  tipoAplicativoId: number;
  fuenteDatosId: number;
  estadoId: number;
  interfazId: number;
  fuenteId: number;
  descripcionTecnicaId: number;
  contextoFuncionalId: number;
};

export type AplicativoForm = Omit<Aplicativo, "id">;

type BackendResponse = {
  status: string;
  mensaje?: string;
  aplcodigo?: number;
};

// üìÖ Fecha actual
const getToday = (): string => new Date().toISOString().split("T")[0];

// üîÅ Mapeo individual
export function mapToAplicativo(raw: any): Aplicativo {
  return {
    id: `apl-${raw.aplcodigo}`,
    nombreCorto: raw.aplnombrecorto ?? "",
    nombreCompleto: raw.aplnombrecompleto ?? "",
    registro: raw.aplregistro ?? "",
    fechaAdquisicion: raw.aplfechaadquisicion?.split("T")[0] ?? "",
    fechaImplementacion: raw.aplfechaimplementacion?.split("T")[0] ?? "",
    proveedor: raw.aplproveedor ?? "",
    version: raw.aplversion ?? "",
    anioCreacion: raw.aplanocreacion ?? 0,
    numeroUsuarios: raw.aplnumerousuario ?? 0,
    administradorUsuario: raw.apladministradorusuario ?? "",
    valorEstimado: raw.aplvalorestimado ?? 0,
    transaccionesMensuales: raw.apltransaccionesmensuales ?? 0,
    fechaActualizacion: raw.aplfechaactualizacion?.split("T")[0] ?? "",
    sla: raw.aplsla ?? "",
    rutaDocTecnico: raw.aplrutadoctecnico ?? "",
    enlace: raw.aplenlace ?? "",
    tiempoReinicio: raw.apltiemporeinicio ?? "",
    horaReinicio: raw.aplhorareinicio ?? "",
    activo: raw.aplactivo === 1,
    descripcion: raw.apldescripcion ?? "",
    observaciones: raw.aplobservaciones ?? "",
    soporteVigente: raw.aplhsoportevigente === 1,
    https: raw.aplhttps === 1,
    areaRequirente: raw.aplarearequirente ?? "",
    subarea: raw.aplsubarea ?? "",
    proceso: raw.aplproceso ?? "",

    criticidadId: raw.cricodigo ?? 0,
    tipoCriticidadId: raw.tipccodigo ?? 0,
    macroprocesoId: raw.maccodigo ?? 0,
    herramientaId: raw.hercodigo ?? 0,
    tipoAccesoId: raw.tipaccesocodigo ?? 0,
    tipoAplicativoId: raw.tipcodigo ?? 0,
    fuenteDatosId: raw.tfdcodigo ?? 0,
    estadoId: raw.estcodigo ?? 0,
    interfazId: raw.intcodigo ?? 0,
    fuenteId: raw.fuecodigo ?? 0,
    descripcionTecnicaId: raw.descodigo ?? 0,
    contextoFuncionalId: raw.concodigo ?? 0,
  };
}

// üîÅ Agrupaci√≥n
export function groupAplicativos(rows: any[]): Aplicativo[] {
  const map = new Map<string, Aplicativo>();
  for (const row of rows) {
    const id = `apl-${row.aplcodigo}`;
    if (!map.has(id)) {
      map.set(id, mapToAplicativo(row));
    }
  }
  return Array.from(map.values());
}

// üì• Obtener aplicativos
export const obtenerAplicativos = async (): Promise<Aplicativo[]> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ accion: "read" }),
    });

    const text = await res.text();
    if (text.trim().startsWith("<")) throw new Error("Respuesta HTML inesperada");

    const data = JSON.parse(text);
    if (!Array.isArray(data)) throw new Error("Formato inesperado");

    return data.map(mapToAplicativo);
  } catch (error) {
    console.error("Error al obtener aplicativos:", error);
    return [];
  }
};

// üì§ Crear aplicativo
export const crearAplicativo = async (a: AplicativoForm): Promise<number | null> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ accion: "insert", ...a }),
    });

    const text = await res.text();
    const result: BackendResponse = JSON.parse(text);
    return result.status === "insertado" ? result.aplcodigo ?? null : null;
  } catch (error) {
    console.error("Error al crear aplicativo:", error);
    return null;
  }
};

// ‚úèÔ∏è Editar aplicativo
export const editarAplicativo = async (a: Aplicativo): Promise<boolean> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ accion: "update", aplcodigo: parseInt(a.id.replace("apl-", "")), ...a }),
    });

    const text = await res.text();
    const result: BackendResponse = JSON.parse(text);
    return result.status === "actualizado";
  } catch (error) {
    console.error("Error al editar aplicativo:", error);
    return false;
  }
};

// üóëÔ∏è Eliminar aplicativo
export const eliminarAplicativo = async (id: string): Promise<boolean> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ accion: "delete", aplcodigo: parseInt(id.replace("apl-", "")) }),
    });

    const text = await res.text();
    const result: BackendResponse = JSON.parse(text);
    return result.status === "deshabilitado";
  } catch (error) {
    console.error("Error al eliminar aplicativo:", error);
    return false;
  }
};
