üìò Contexto para implementar paginaci√≥n en el m√≥dulo de activos f√≠sicos
üéØ Objetivo
Dise√±ar una interfaz que permita listar activos f√≠sicos de forma paginada, con navegaci√≥n visual (flechas), filtros opcionales y sin perder la p√°gina actual al editar o visualizar un activo.

üß© Estructura recomendada
1. Estados en React
tsx
const [todosActivos, setTodosActivos] = useState<Activo[]>([]);
const [filteredActivos, setFilteredActivos] = useState<Activo[]>([]);
const [currentPage, setCurrentPage] = useState(1);
const [pageSize] = useState(10);
const [pageCount, setPageCount] = useState(1);
2. Carga desde backend
tsx
const cargarTodos = async () => {
  const data = await obtenerTodosActivos(); // funci√≥n que llama al backend
  setTodosActivos(data);
};
3. Aplicar filtros y calcular p√°ginas
tsx
useEffect(() => {
  const filtrados = todosActivos.filter(...); // opcional: por tipo, estado, ubicaci√≥n
  setFilteredActivos(filtrados);
  setPageCount(Math.max(1, Math.ceil(filtrados.length / pageSize)));
}, [todosActivos, filtros...]);
4. Extraer activos visibles en la p√°gina actual
tsx
const paginados = filteredActivos.slice(
  (currentPage - 1) * pageSize,
  currentPage * pageSize
);
5. Navegaci√≥n visual con flechas
tsx
<div className="flex justify-center items-center space-x-2">
  <button onClick={() => setCurrentPage(1)} disabled={currentPage === 1}>‚èÆ Inicio</button>
  <button onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))} disabled={currentPage === 1}>‚óÄ Anterior</button>
  <span>P√°gina {currentPage} de {pageCount}</span>
  <button onClick={() => setCurrentPage(prev => Math.min(prev + 1, pageCount))} disabled={currentPage >= pageCount}>Siguiente ‚ñ∂</button>
  <button onClick={() => setCurrentPage(pageCount)} disabled={currentPage >= pageCount}>Fin ‚è≠</button>
</div>
6. Evitar reinicio de p√°gina al editar
En la funci√≥n handleSuccess() (tras guardar un activo), no se debe reiniciar currentPage. Solo se actualiza la lista:

tsx
const handleSuccess = () => {
  handleModalClose();
  cargarTodos(); // mantiene la p√°gina actual
};
7. Backend sugerido
Si se desea paginaci√≥n desde el backend:

sql
EXEC get_activos_paginated @limit, @offset
Y en el frontend:

ts
const offset = (currentPage - 1) * pageSize;
üß† Recomendaciones adicionales
Mantener el dise√±o visual limpio y agrupado por secciones (ej. informaci√≥n t√©cnica, ubicaci√≥n, estado).

Agregar filtros por tipo de activo, estado, ubicaci√≥n o responsable.

Reutilizar componentes visuales como Section, Input, Select, TextArea si ya existen.
