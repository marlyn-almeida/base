// Creado o modificado por Marlyn Almeida el 14/08/2025.
// Descripción: Alineado con backend actualizado. Se eliminó el campo tipo y empprofile, y se ajustó el envío de códigos.

const API_URL = "http://localhost/aplicativo/backend/Cruds/empleados.php";

// 🧩 Interfaz Responsable
export type Responsable = {
  id: string;
  cedula: string;
  nombre: string;
  apellido: string;
  apellidomaterno: string;
  email: string;
  telefono: string;
  area: string;
  arecodigo: number;
  rol: string;
  rolcodigo: number;
  perfil: string;
  percodigo: number;
  estado: "Activo" | "Inactivo";
  fechaIngreso: string;
  fechaCreacion: string;
  usuario: string;
  observaciones: string;
  servidoresAsignados: number;
  aplicacionesAsignadas: number;
  sexo: "Masculino" | "Femenino" | "Otro";
  tipoSangre: "A+" | "A-" | "B+" | "B-" | "AB+" | "AB-" | "O+" | "O-";
  descripcion: string;
};

// 🧩 Tipo de respuesta del backend
type BackendResponse = {
  status: string;
  mensaje?: string;
};

// 📅 Fecha actual
const getToday = (): string => new Date().toISOString().split("T")[0];

// 📥 Obtener responsables
export const obtenerResponsables = async (): Promise<Responsable[]> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ accion: "read" }),
    });

    if (!res.ok) throw new Error(`Error HTTP: ${res.status}`);

    const text = await res.text();

    if (text.trim().startsWith("<")) {
      console.error("⚠️ El backend devolvió HTML en lugar de JSON:");
      console.error(text);
      throw new Error("Respuesta no válida del servidor (HTML recibido)");
    }

    const data = JSON.parse(text);

    if (!Array.isArray(data)) throw new Error("Respuesta inesperada del backend");

    return data.map((item: any): Responsable => ({
      id: `resp-${item.empcodigo}`,
      cedula: item.empcedula ?? "",
      nombre: item.empnombres ?? "",
      apellido: item.empapellidopaterno ?? "",
      apellidomaterno: item.empapellidomaterno ?? "",
      email: item.empemail ?? "",
      telefono: item.empcelular ?? "",
      area: item.arenombre ?? "",
      rol: item.rolnombre ?? "",
      perfil: item.pernombre ?? "",
      arecodigo: item.arecodigo ?? 0,
      rolcodigo: item.rolcodigo ?? 0,
      percodigo: item.percodigo ?? 0,
      estado: item.empactivo === 1 ? "Activo" : "Inactivo",
      fechaIngreso: item.fechainicio?.split("T")[0] ?? getToday(),
      fechaCreacion: item.empfechacreacion?.split("T")[0] ?? "",
      usuario: item.empusuario ?? "",
      observaciones: item.empobservaciones ?? "",
      servidoresAsignados: item.servidoresAsignados ?? 0,
      aplicacionesAsignadas: item.aplicacionesAsignadas ?? 0,
      sexo: item.empsexo ?? "Otro",
      tipoSangre: item.empsangre ?? "O+",
      descripcion: item.empdescripcion ?? "",
    }));
  } catch (error) {
    console.error("Error al obtener responsables:", error);
    return [];
  }
};

// 📤 Crear responsable
export const crearResponsable = async (r: Responsable): Promise<boolean> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        accion: "insert",
        empcedula: r.cedula,
        empnombres: r.nombre,
        empapellidopaterno: r.apellido,
        empapellidomaterno: r.apellidomaterno,
        empemail: r.email,
        empcelular: r.telefono,
        empactivo: r.estado === "Activo" ? 1 : 0,
        empusuario: r.usuario,
        empsexo: r.sexo,
        empsangre: r.tipoSangre,
        empdescripcion: r.descripcion,
        empobservaciones: r.observaciones,
        arecodigo: r.arecodigo,
        rolcodigo: r.rolcodigo,
        percodigo: r.percodigo,
        fechainicio: r.fechaIngreso,
      }),
    });

    const text = await res.text();

    if (text.trim().startsWith("<")) {
      console.error("⚠️ El backend devolvió HTML en lugar de JSON:");
      console.error(text);
      throw new Error("Respuesta no válida del servidor (HTML recibido)");
    }

    const result: BackendResponse = JSON.parse(text);
    return result.status === "insertado";
  } catch (error) {
    console.error("Error al crear responsable:", error);
    return false;
  }
};

// ✏️ Editar responsable
export const editarResponsable = async (r: Responsable): Promise<boolean> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        accion: "update",
        empcodigo: parseInt(r.id.replace("resp-", "")),
        empcedula: r.cedula,
        empnombres: r.nombre,
        empapellidopaterno: r.apellido,
        empapellidomaterno: r.apellidomaterno,
        empemail: r.email,
        empcelular: r.telefono,
        empactivo: r.estado === "Activo" ? 1 : 0,
        empusuario: r.usuario,
        empsexo: r.sexo,
        empsangre: r.tipoSangre,
        empdescripcion: r.descripcion,
        empobservaciones: r.observaciones,
        arecodigo: r.arecodigo,
        rolcodigo: r.rolcodigo,
        percodigo: r.percodigo,
        fechainicio: r.fechaIngreso,
      }),
    });

    const text = await res.text();

    if (text.trim().startsWith("<")) {
      console.error("⚠️ El backend devolvió HTML en lugar de JSON:");
      console.error(text);
      throw new Error("Respuesta no válida del servidor (HTML recibido)");
    }

    const result: BackendResponse = JSON.parse(text);
    return result.status === "actualizado";
  } catch (error) {
    console.error("Error al editar responsable:", error);
    return false;
  }
};

// 🗑️ Eliminar responsable
export const eliminarResponsable = async (id: string): Promise<boolean> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        accion: "delete",
        empcodigo: parseInt(id.replace("resp-", "")),
      }),
    });

    const text = await res.text();

    if (text.trim().startsWith("<")) {
      console.error("⚠️ El backend devolvió HTML en lugar de JSON:");
      console.error(text);
      throw new Error("Respuesta no válida del servidor (HTML recibido)");
    }

    const result: BackendResponse = JSON.parse(text);
    return result.status === "deshabilitado";
  } catch (error) {
    console.error("Error al eliminar responsable:", error);
    return false;
  }
};
