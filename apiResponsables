// Creado o modificado por Marlyn Almeida el 06/08/2025.
// Descripción: Se actualizó la definición de Responsable y las funciones de API para reflejar los campos reales del modelo,
// incluyendo cedula, fecha de creación, usuario, perfil, observaciones, bitácora y lógica de desactivación.

const API_URL = "http://localhost/aplicativo/backend/Cruds/empleados.php";

//  Interfaz Responsable
export type Responsable = {
  id: string;
  cedula: string;
  nombre: string;
  apellido: string;
  apellidomaterno: string;
  email: string;
  telefono: string;
  area: string;
  tipo: "DBA" | "INF" | "WS" | "APL";
  estado: "Activo" | "Inactivo";
  fechaIngreso: string;
  fechaCreacion: string;
  usuario: string;
  perfil: string;
  observaciones: string;
  servidoresAsignados: number;
  aplicacionesAsignadas: number;
  sexo: "Masculino" | "Femenino" | "Otro";
  tipoSangre: "A+" | "A-" | "B+" | "B-" | "AB+" | "AB-" | "O+" | "O-";
  nivel: string;
  descripcion: string;
  rolcodigo: string;
  percodigo: string;
  empprofile: string;
};

//  Obtener responsables
export const obtenerResponsables = async (): Promise<Responsable[]> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ accion: "read" }),
    });

    if (!res.ok) throw new Error(`Error HTTP: ${res.status}`);

    const data = await res.json();

    if (!Array.isArray(data)) throw new Error("Respuesta inesperada del backend");

    return data.map((item: any): Responsable => ({
      id: `resp-${item.empcodigo}`,
      cedula: item.empcedula ?? "",
      nombre: item.empnombres ?? "",
      apellido: item.empapellidopaterno ?? "",
      apellidomaterno: item.empapellidomaterno ?? "",
      email: item.empemail ?? "",
      telefono: item.empcelular ?? "",
      area: item.arenombre ?? "",
      tipo: mapRolToTipo(item.rolcodigo), // ✅ Aquí se ajustó el tipo
      estado: item.empactivo === 1 ? "Activo" : "Inactivo",
      fechaIngreso: item.fechainicio?.split("T")[0] ?? getToday(),
      fechaCreacion: item.empfechacreacion?.split("T")[0] ?? "",
      usuario: item.empusuario ?? "",
      perfil: item.empprofile ?? "",
      observaciones: item.empobservacion ?? "",
      servidoresAsignados: item.servidoresAsignados ?? 0,
      aplicacionesAsignadas: item.aplicacionesAsignadas ?? 0,
      sexo: item.empsexo ?? "Otro",
      tipoSangre: item.empsangre ?? "O+",
      nivel: item.empnivel ?? "",
      descripcion: item.empdescripcion ?? "",
      rolcodigo: String(item.rolcodigo ?? ""),
      percodigo: String(item.percodigo ?? ""),
      empprofile: item.empprofile ?? "",
    }));
  } catch (error) {
    console.error("Error al obtener responsables:", error);
    return [];
  }
};

//  Crear responsable
export const crearResponsable = async (r: Responsable): Promise<boolean> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        accion: "create",
        empcodigo: parseInt(r.id.replace("resp-", "")),
        empcedula: r.cedula,
        empnombres: r.nombre,
        empapellidopaterno: r.apellido,
        empapellidomaterno: r.apellidomaterno,
        empemail: r.email,
        empcelular: r.telefono,
        empactivo: r.estado === "Activo" ? 1 : 0,
        empnivel: r.nivel,
        empusuario: r.usuario,
        empprofile: r.empprofile,
        empsexo: r.sexo,
        empsangre: r.tipoSangre,
        empdescripcion: r.descripcion,
        empobservacion: r.observaciones,
        arecodigo: mapAreaToCodigo(r.area),
        percodigo: r.percodigo,
        rolcodigo: r.rolcodigo,
        fechainicio: r.fechaIngreso,
        empfechacreacion: getToday(),
      }),
    });

    const result = await res.json();
    return result.status === "insertado";
  } catch (error) {
    console.error("Error al crear responsable:", error);
    return false;
  }
};

//  Editar responsable
export const editarResponsable = async (r: Responsable): Promise<boolean> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        accion: "update",
        empcodigo: parseInt(r.id.replace("resp-", "")),
        empcedula: r.cedula,
        empnombres: r.nombre,
        empapellidopaterno: r.apellido,
        empapellidomaterno: r.apellidomaterno,
        empemail: r.email,
        empcelular: r.telefono,
        empactivo: r.estado === "Activo" ? 1 : 0,
        empnivel: r.nivel,
        empusuario: r.usuario,
        empprofile: r.empprofile,
        empsexo: r.sexo,
        empsangre: r.tipoSangre,
        empdescripcion: r.descripcion,
        empobservacion: r.observaciones,
        arecodigo: mapAreaToCodigo(r.area),
        percodigo: r.percodigo,
        rolcodigo: r.rolcodigo,
        fechainicio: r.fechaIngreso,
      }),
    });

    const result = await res.json();
    return result.status === "actualizado";
  } catch (error) {
    console.error("Error al editar responsable:", error);
    return false;
  }
};

//  Eliminar responsable
export const eliminarResponsable = async (id: string): Promise<boolean> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        accion: "delete",
        empcodigo: parseInt(id.replace("resp-", "")),
      }),
    });

    const result = await res.json();
    return result.status === "deshabilitado";
  } catch (error) {
    console.error("Error al eliminar responsable:", error);
    return false;
  }
};

//  Mapeos

const mapRolToTipo = (rol: number): Responsable["tipo"] => {
  const map: Record<number, Responsable["tipo"]> = {
    1: "DBA",
    2: "INF",
    3: "WS",
    4: "APL",
  };
  return map[rol] ?? "APL";
};

const mapAreaToCodigo = (area: string): number => {
  const map: Record<string, number> = {
    "Aplicaciones y Arquitectura": 10,
    "Centro de datos": 20,
    "Control de operaciones": 30,
    "Administrativas": 40,
  };
  return map[area] ?? 0;
};

//  Fecha actual en formato YYYY-MM-DD
const getToday = (): string => new Date().toISOString().split("T")[0];
