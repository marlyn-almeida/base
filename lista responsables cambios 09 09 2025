// Creado o modificado por Marlyn Almeida – 09/09/2025
// Descripción: Componente para listar responsables con filtros, estadísticas y paginación. Alineado con backend actualizado.

import React, { useEffect, useState } from "react";
import FormularioResponsable from "./FormularioResponsable";
import { Responsable, obtenerResponsables } from "./apiResponsables";

const ListaResponsables = () => {
  const [responsables, setResponsables] = useState<Responsable[]>([]);
  const [filterRol, setFilterRol] = useState("");
  const [filterEstado, setFilterEstado] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedResponsable, setSelectedResponsable] = useState<Responsable | null>(null);
  const [isEditing, setIsEditing] = useState(false);

  // Estados de paginación
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize] = useState(10);
  const [pageCount, setPageCount] = useState(1); // puede ajustarse si el backend devuelve total

  // Carga de responsables desde backend con control de errores
  const cargarResponsables = async () => {
    try {
      const data = await obtenerResponsables(currentPage, pageSize);
      setResponsables(data);
      // Si el backend devuelve total, calcular pageCount aquí
      // setPageCount(Math.ceil(total / pageSize));
    } catch (error) {
      console.error("Error al cargar responsables:", error);
    }
  };

  useEffect(() => {
    cargarResponsables();
  }, [currentPage]);

  // Abrir modal para edición
  const handleEditarResponsable = (resp: Responsable) => {
    setSelectedResponsable(resp);
    setIsEditing(true);
    setIsModalOpen(true);
  };

  // Eliminar responsable localmente
  const handleEliminarResponsable = (id: string) => {
    setResponsables((prev) => prev.filter((r) => r.id !== id));
  };

  // Cierre del modal
  const handleModalClose = () => {
    setIsModalOpen(false);
    setSelectedResponsable(null);
    setIsEditing(false);
  };

  // Recarga tras creación o edición
  const handleSuccess = () => {
    handleModalClose();
    cargarResponsables();
  };

  // Aplicación de filtros y búsqueda
  const filteredResponsables = responsables.filter((r) => {
    const matchesRol = filterRol === "" || r.rol === filterRol;
    const matchesEstado = filterEstado === "" || r.estado === filterEstado;
    const matchesSearch =
      searchTerm === "" ||
      r.nombre.toLowerCase().includes(searchTerm.toLowerCase()) ||
      r.apellido.toLowerCase().includes(searchTerm.toLowerCase()) ||
      r.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      r.area.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesRol && matchesEstado && matchesSearch;
  });

  // Estadísticas básicas por rol y estado
  const estadisticas = {
    total: responsables.length,
    activos: responsables.filter((r) => r.estado === "Activo").length,
    inactivos: responsables.filter((r) => r.estado === "Inactivo").length,
    dba: responsables.filter((r) => r.rol === "DBA").length,
    inf: responsables.filter((r) => r.rol === "INF").length,
    ws: responsables.filter((r) => r.rol === "WS").length,
    apl: responsables.filter((r) => r.rol === "APL").length,
  };

  return (
    <div className="p-6 space-y-6">
      {/* Filtros */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="Buscar por nombre, email o área..."
          className="px-3 py-2 border rounded-lg w-full"
        />
        <select value={filterRol} onChange={(e) => setFilterRol(e.target.value)} className="px-3 py-2 border rounded-lg w-full">
          <option value="">Todos los roles</option>
          <option value="DBA">DBA</option>
          <option value="INF">INF</option>
          <option value="WS">WS</option>
          <option value="APL">APL</option>
        </select>
        <select value={filterEstado} onChange={(e) => setFilterEstado(e.target.value)} className="px-3 py-2 border rounded-lg w-full">
          <option value="">Todos los estados</option>
          <option value="Activo">Activo</option>
          <option value="Inactivo">Inactivo</option>
        </select>
        <button
          onClick={() => {
            setSelectedResponsable(null);
            setIsEditing(false);
            setIsModalOpen(true);
          }}
          className="bg-blue-700 text-white px-4 py-2 rounded-lg hover:bg-blue-800 transition-colors"
        >
          Nuevo Responsable
        </button>
      </div>

      {/* Estadísticas */}
      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4">
        {Object.entries(estadisticas).map(([key, value]) => (
          <div key={key} className="bg-white p-4 rounded-lg shadow-md text-center">
            <div className="text-2xl font-bold text-blue-700">{value}</div>
            <div className="text-sm text-gray-600 capitalize">{key}</div>
          </div>
        ))}
      </div>

      {/* Lista de responsables */}
      <div className="space-y-4">
        {filteredResponsables.map((r) => (
          <div key={r.id} className="bg-white p-6 rounded-lg shadow-md">
            <div className="flex justify-between items-start mb-4">
              <div>
                <h3 className="text-xl font-semibold text-gray-900">
                  {r.nombre} {r.apellido}
                </h3>
                <p className="text-gray-600">{r.email}</p>
                <div className="flex items-center space-x-4 mt-1">
                  <span className="px-2 py-1 text-xs rounded-full bg-gray-100 text-gray-800">
                    {r.rol}
                  </span>
                  <span className={`px-2 py-1 text-xs rounded-full ${r.estado === "Activo" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`}>
                    {r.estado}
                  </span>
                </div>
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={() => handleEditarResponsable(r)}
                  className="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
                >
                  Editar
                </button>
                <button
                  onClick={() => handleEliminarResponsable(r.id)}
                  className="px-3 py-1 text-sm bg-red-100 text-red-700 rounded hover:bg-red-200"
                >
                  Eliminar
                </button>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <h4 className="text-sm font-semibold mb-2">Información personal</h4>
                <div className="text-sm space-y-1">
                  <div><strong>Sexo:</strong> {r.sexo}</div>
                  <div><strong>Tipo de sangre:</strong> {r.tipoSangre}</div>
                  <div><strong>Fecha de ingreso:</strong> {r.fechaIngreso}</div>
                  <div><strong>Fecha de creación:</strong> {r.fechaCreacion}</div>
                </div>
              </div>

              <div>
                <h4 className="text-sm font-semibold mb-2">Detalles técnicos</h4>
                <div className="text-sm space-y-1">
                  <div><strong>Perfil:</strong> {r.perfil}</div>
                  <div><strong>Rol:</strong> {r.rol}</div>
                  {r.descripcion && (
                    <div><strong>Descripción:</strong> {r.descripcion}</div>
                  )}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Paginación visual */}
      <div className="mt-6 flex justify-center items-center space-x-2">
        <button
          className="px-3 py-1 bg-gray-200 rounded disabled:opacity-50"
          onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
          disabled={currentPage === 1}
        >
          Anterior
        </button>
        >
          Siguiente
        </button>
      </div>

      {/* Si no hay resultados */}
      {filteredResponsables.length === 0 && (
        <div className="bg-white p-8 rounded-lg shadow-md text-center text-gray-500">
          <div className="text-lg mb-2">No se encontraron responsables</div>
          <p className="text-gray-400">Prueba con otros filtros o agrega uno nuevo</p>
        </div>
      )}

      {/* Modal de formulario */}
      <FormularioResponsable
        responsable={selectedResponsable}
        isOpen={isModalOpen}
        onClose={handleModalClose}
        onSuccess={handleSuccess}
        isEditing={isEditing}
      />
    </div>
  );
};

export default ListaResponsables;

