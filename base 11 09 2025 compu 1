USE [MSQCATPRO_MA]
GO
/****** Object:  UserDefinedFunction [dbo].[getTotalActivos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Total de activos f√≠sicos
CREATE FUNCTION [dbo].[getTotalActivos]()
RETURNS INT
AS
BEGIN
    DECLARE @Total INT;
    SELECT @Total = COUNT(*) FROM dbo.Activo_Fisico;
    RETURN @Total;
END;
GO
/****** Object:  UserDefinedFunction [dbo].[getTotalOperativos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Total de activos en estado operativo
CREATE FUNCTION [dbo].[getTotalOperativos]()
RETURNS INT
AS
BEGIN
    DECLARE @Total INT;
    SELECT @Total = COUNT(*) 
    FROM dbo.Activo_Fisico
    WHERE Estado = 'Operativo';
    RETURN @Total;
END;
GO
/****** Object:  Table [dbo].[Activo_Fisico]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Activo_Fisico](
	[id_activo_fisico] [int] IDENTITY(1,1) NOT NULL,
	[Naturaleza] [nvarchar](50) NULL,
	[Activo] [nvarchar](50) NULL,
	[Gestion_TIC] [nvarchar](50) NULL,
	[Descripcion_Activo] [nvarchar](max) NULL,
	[Etiqueta_Activo_Fijo] [nvarchar](150) NULL,
	[Codigo_activo_Fijo_EBS] [nvarchar](50) NULL,
	[Centro_Costo] [nvarchar](50) NULL,
	[Fabricante] [nvarchar](100) NULL,
	[Modelo] [nvarchar](150) NULL,
	[Serie] [nvarchar](100) NULL,
	[Num_Contrato] [nvarchar](150) NULL,
	[Fecha_Recepcion] [datetime] NULL,
	[Caducidad_Garantia] [datetime] NULL,
	[ID_Zona] [int] NULL,
	[Precio_Compra] [decimal](18, 2) NULL,
	[Ubicacion_Desc] [nvarchar](max) NULL,
	[Estado_activo] [nvarchar](50) NULL,
 CONSTRAINT [PK_Activo_Fisico] PRIMARY KEY CLUSTERED 
(
	[id_activo_fisico] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[aplicativo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[aplicativo](
	[aplcodigo] [int] IDENTITY(1,1) NOT NULL,
	[cricodigo] [int] NOT NULL,
	[tipccodigo] [int] NOT NULL,
	[hercodigo] [int] NOT NULL,
	[tipaccesocodigo] [int] NOT NULL,
	[tipcodigo] [int] NOT NULL,
	[tfdcodigo] [int] NOT NULL,
	[estcodigo] [int] NOT NULL,
	[intcodigo] [int] NOT NULL,
	[fuecodigo] [int] NOT NULL,
	[descodigo] [int] NOT NULL,
	[concodigo] [int] NOT NULL,
	[aplnombrecorto] [varchar](50) NOT NULL,
	[aplnombrecompleto] [varchar](250) NOT NULL,
	[aplregistro] [varchar](50) NULL,
	[aplfechaadquisicion] [datetime] NULL,
	[aplfechaimplementacion] [datetime] NULL,
	[aplproveedor] [varchar](100) NULL,
	[aplversion] [varchar](100) NULL,
	[aplanocreacion] [int] NULL,
	[aplnumerousuario] [int] NULL,
	[apladministradorusuario] [varchar](200) NULL,
	[aplvalorestimado] [varchar](100) NULL,
	[apltransaccionesmensuales] [varchar](50) NULL,
	[aplfechaactualizacion] [datetime] NULL,
	[aplsla] [varchar](100) NULL,
	[aplrutadoctecnico] [varchar](1000) NULL,
	[aplenlace] [varchar](1200) NULL,
	[apltiemporeinicio] [varchar](200) NULL,
	[aplhorareinicio] [varchar](200) NULL,
	[aplactivo] [int] NULL,
	[apldescripcion] [varchar](750) NULL,
	[aplobservaciones] [varchar](800) NULL,
	[aplhsoportevigente] [varchar](20) NULL,
	[aplhttps] [int] NULL,
	[aplarearequirente] [varchar](300) NULL,
	[aplsubarea] [varchar](300) NULL,
	[aplproceso] [varchar](200) NULL,
 CONSTRAINT [pk_aplicativo] PRIMARY KEY NONCLUSTERED 
(
	[aplcodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[area]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[area](
	[arecodigo] [int] NOT NULL,
	[arenombre] [varchar](100) NOT NULL,
	[areactivo] [int] NULL,
	[aredescripcion] [varchar](500) NULL,
	[areobservaciones] [varchar](500) NULL,
	[aretipo] [varchar](50) NOT NULL,
 CONSTRAINT [pk_area] PRIMARY KEY NONCLUSTERED 
(
	[arecodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[areaempleado]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[areaempleado](
	[empcodigo] [int] NOT NULL,
	[arecodigo] [int] NOT NULL,
 CONSTRAINT [pk_areaempleado] PRIMARY KEY CLUSTERED 
(
	[empcodigo] ASC,
	[arecodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[auditoria]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[auditoria](
	[audcodigo] [int] NOT NULL,
	[audtablaafectada] [varchar](50) NULL,
	[audtipotransaccion] [varchar](1) NULL,
	[audfecha] [datetime] NULL,
	[audip] [varchar](20) NULL,
	[audusuario] [varchar](50) NULL,
	[audidentificacion] [varchar](50) NULL,
	[audsistema] [varchar](50) NULL,
	[audperfil] [varchar](50) NULL,
	[audmenu] [varchar](50) NULL,
	[audcampoafectado] [varchar](30) NULL,
	[audaccion] [varchar](1000) NULL,
	[audvaloranterior] [varchar](500) NULL,
	[audvalornuevo] [varchar](500) NULL,
	[audregistro] [varchar](100) NULL,
	[audmoduloafectado] [varchar](50) NULL,
	[audclaveprimaria1] [varchar](100) NULL,
	[audclaveprimaria2] [varchar](100) NULL,
	[audclaveprimaria3] [varchar](100) NULL,
	[audclaveprimaria4] [varchar](100) NULL,
	[audesquema] [varchar](30) NULL,
	[audgrupoad] [varchar](50) NULL,
	[audactivo] [int] NULL,
	[auddescripcion] [varchar](500) NULL,
	[audobservaciones] [varchar](500) NULL,
 CONSTRAINT [pk_auditoria] PRIMARY KEY NONCLUSTERED 
(
	[audcodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Auxiliar_Base]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Auxiliar_Base](
	[ID_Auxiliar_Base] [int] IDENTITY(1,1) NOT NULL,
	[ID_Base] [int] NOT NULL,
	[empcodigo] [int] NOT NULL,
	[Tipo_Auxiliar] [varchar](20) NOT NULL,
	[Fecha_Asignacion] [datetime] NOT NULL,
	[Fecha_Desasignacion] [datetime] NULL,
	[Estado_Auxiliar] [varchar](20) NOT NULL,
 CONSTRAINT [PK_Auxiliar_Base] PRIMARY KEY CLUSTERED 
(
	[ID_Auxiliar_Base] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Base_Servidores]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Base_Servidores](
	[ID_Base_Servidor] [int] IDENTITY(1,1) NOT NULL,
	[ID_Base] [int] NOT NULL,
	[ID_Servidor] [int] NOT NULL,
	[Fecha_Inicio_B] [datetime] NOT NULL,
	[Fecha_Fin_B] [datetime] NULL,
	[Estado_Asignacion] [varchar](20) NOT NULL,
 CONSTRAINT [PK_Base_Servidores] PRIMARY KEY CLUSTERED 
(
	[ID_Base_Servidor] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BaseDatos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BaseDatos](
	[ID_Base] [int] IDENTITY(1,1) NOT NULL,
	[Nombre_Base] [varchar](100) NOT NULL,
	[Nombre_Instancia] [varchar](100) NULL,
	[Tipo_Base] [varchar](50) NULL,
	[Descripcion] [varchar](300) NULL,
	[Estado_Base] [varchar](20) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Base] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[bitacoraacceso]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[bitacoraacceso](
	[accesoid] [int] IDENTITY(1,1) NOT NULL,
	[usuariocodigo] [int] NOT NULL,
	[fechaacceso] [datetime] NULL,
	[ipacceso] [varchar](50) NULL,
	[resultado] [varchar](20) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[accesoid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[contrato_aplicativo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[contrato_aplicativo](
	[contcodigo] [int] IDENTITY(1,1) NOT NULL,
	[aplcodigo] [int] NOT NULL,
	[conttipo] [varchar](50) NOT NULL,
	[contdescripcion] [varchar](300) NULL,
	[contproveedor] [varchar](100) NULL,
	[contregistro] [varchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[contcodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[control]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[control](
	[concodigo] [int] NOT NULL,
	[connombre] [nvarchar](500) NOT NULL,
	[conactivo] [int] NULL,
	[condescripcion] [nvarchar](500) NULL,
	[conobservacion] [nvarchar](500) NULL,
 CONSTRAINT [pk_control] PRIMARY KEY NONCLUSTERED 
(
	[concodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[criticidad]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[criticidad](
	[cricodigo] [int] NOT NULL,
	[crinombre] [varchar](50) NOT NULL,
	[criactivo] [int] NULL,
	[cridescripcion] [varchar](500) NULL,
	[criobservacion] [varchar](500) NULL,
 CONSTRAINT [pk_criticidad] PRIMARY KEY NONCLUSTERED 
(
	[cricodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Data_Job]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Data_Job](
	[ID_Data_Job] [int] IDENTITY(1,1) NOT NULL,
	[ID_DataStore] [int] NOT NULL,
	[ID_Job] [int] NOT NULL,
	[Estado] [varchar](20) NOT NULL,
	[Fecha_Asociacion] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Data_Job] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DataStore]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DataStore](
	[ID_DataStore] [int] IDENTITY(1,1) NOT NULL,
	[Nombre_Data] [varchar](100) NOT NULL,
	[Capacidad_Data] [int] NOT NULL,
	[Estado] [varchar](20) NOT NULL,
	[Fecha_Creacion] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_DataStore] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[Nombre_Data] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[desarrollo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[desarrollo](
	[descodigo] [int] NOT NULL,
	[desnombre] [varchar](50) NOT NULL,
	[desactivo] [int] NULL,
	[desdescripcion] [varchar](500) NULL,
	[desobservacion] [varchar](500) NULL,
 CONSTRAINT [pk_desarrollo] PRIMARY KEY NONCLUSTERED 
(
	[descodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[empleado]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[empleado](
	[empcodigo] [int] IDENTITY(1,1) NOT NULL,
	[empnombres] [varchar](100) NOT NULL,
	[empapellidopaterno] [varchar](100) NOT NULL,
	[empapellidomaterno] [varchar](100) NULL,
	[empcedula] [varchar](40) NULL,
	[empemail] [varchar](100) NULL,
	[empcelular] [varchar](20) NULL,
	[emptiposangre] [varchar](5) NULL,
	[empsexo] [char](1) NULL,
	[empfechainicio] [datetime] NULL,
	[empfechacreacion] [datetime] NULL,
	[empactivo] [int] NULL,
	[empdescripcion] [varchar](500) NULL,
	[empobservaciones] [varchar](500) NULL,
 CONSTRAINT [pk_empleado] PRIMARY KEY NONCLUSTERED 
(
	[empcodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Empleado_Activo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Empleado_Activo](
	[ID_Empleado_Activo] [int] IDENTITY(1,1) NOT NULL,
	[EmpCodigo] [int] NOT NULL,
	[ID_Activo_Fisico] [int] NOT NULL,
	[Fecha_Asignacion] [datetime] NULL,
	[Fecha_Desasignacion] [datetime] NULL,
	[Observacion] [nvarchar](500) NULL,
	[Estado] [nvarchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Empleado_Activo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[estado]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[estado](
	[estcodigo] [int] NOT NULL,
	[estnombre] [varchar](50) NOT NULL,
	[estactivo] [int] NULL,
	[estdescripcion] [varchar](500) NULL,
	[estobservaciones] [varchar](500) NULL,
 CONSTRAINT [pk_estado] PRIMARY KEY NONCLUSTERED 
(
	[estcodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Frecuencia_Respaldo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Frecuencia_Respaldo](
	[ID_Frecuencia] [int] IDENTITY(1,1) NOT NULL,
	[Tipo_Frecuencia] [varchar](10) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Frecuencia] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[Tipo_Frecuencia] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[fuente]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[fuente](
	[fuecodigo] [int] NOT NULL,
	[fuenombre] [varchar](50) NOT NULL,
	[fueactivo] [int] NULL,
	[fuedescripcion] [varchar](500) NULL,
	[fueobservacion] [varchar](500) NULL,
 CONSTRAINT [pk_fuente] PRIMARY KEY NONCLUSTERED 
(
	[fuecodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[herramienta]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[herramienta](
	[hercodigo] [int] NOT NULL,
	[hernombre] [varchar](50) NOT NULL,
	[heractivo] [int] NULL,
	[herdescripcion] [varchar](500) NULL,
	[herobservacion] [varchar](500) NULL,
 CONSTRAINT [pk_herramienta] PRIMARY KEY NONCLUSTERED 
(
	[hercodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IP]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IP](
	[ID_IP] [int] IDENTITY(1,1) NOT NULL,
	[Direccion_IP] [varchar](250) NOT NULL,
	[Estado_Ip] [bit] NOT NULL,
	[Gateway] [varchar](250) NULL,
	[Mascara_Subred] [varchar](100) NULL,
	[Rango] [varchar](250) NULL,
	[DNS1] [varchar](250) NULL,
	[DNS2] [varchar](250) NULL,
	[VLAND] [varchar](100) NULL,
	[Descripcion] [varchar](500) NULL,
	[ID_Responsable] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_IP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Jobs]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Jobs](
	[ID_Job] [int] IDENTITY(1,1) NOT NULL,
	[Dia_Ejecucion] [varchar](15) NOT NULL,
	[Retencion] [int] NOT NULL,
	[Estado] [varchar](20) NOT NULL,
	[Fecha_Creacion] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Job] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Jobs_Respaldo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Jobs_Respaldo](
	[ID_JR] [int] IDENTITY(1,1) NOT NULL,
	[ID_Job] [int] NOT NULL,
	[ID_Respaldo] [int] NOT NULL,
	[Estado] [varchar](20) NOT NULL,
	[Fecha_Asociacion] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_JR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[perfil]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[perfil](
	[percodigo] [int] NOT NULL,
	[pernombre] [varchar](100) NOT NULL,
	[peractivo] [int] NULL,
	[perdescripcion] [varchar](500) NULL,
	[perobservaciones] [nvarchar](500) NULL,
 CONSTRAINT [pk_perfil] PRIMARY KEY NONCLUSTERED 
(
	[percodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[perfilempleado]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[perfilempleado](
	[percodigo] [int] NOT NULL,
	[empcodigo] [int] NOT NULL,
 CONSTRAINT [pk_perfilempleado] PRIMARY KEY CLUSTERED 
(
	[percodigo] ASC,
	[empcodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Respaldo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Respaldo](
	[ID_Respaldo] [int] IDENTITY(1,1) NOT NULL,
	[ID_Servidor] [int] NOT NULL,
	[ID_Frecuencia] [int] NOT NULL,
	[es_historico] [bit] NULL,
	[estado_respaldo] [varchar](20) NULL,
	[tiempo_ejecucion] [varchar](50) NULL,
	[resultado_ejecucion] [varchar](500) NULL,
	[respaldo_completo] [bit] NULL,
	[estcodigo] [int] NULL,
	[fecha_respaldo] [datetime] NULL,
	[ID_Tipo_Respaldo] [int] NOT NULL,
	[tiempo_Respaldo_Serv] [varchar](100) NULL,
	[ruta_respaldo_Granular_Serv] [varchar](200) NULL,
	[Periodo_Retencion_Serv] [varchar](100) NULL,
	[Doble_Copia_Serv] [varchar](250) NULL,
	[Dia_Ejecucion_Almac] [varchar](250) NULL,
	[Hora_Almac] [varchar](250) NULL,
	[ruta_respaldo_Granular_Almac] [varchar](200) NULL,
	[Periodo_Retencion_Almac] [varchar](100) NULL,
	[Doble_Copia_Almac] [varchar](100) NULL,
	[antivirus_activo] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Respaldo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Respaldos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Respaldos](
	[ID_Respaldo] [int] IDENTITY(1,1) NOT NULL,
	[Nombre_Respaldo] [varchar](100) NOT NULL,
	[Calendario] [varchar](50) NOT NULL,
	[ID_Tipo_Respaldo] [int] NOT NULL,
	[ID_Frecuencia] [int] NOT NULL,
	[Dia_Ejecucion] [varchar](15) NULL,
	[Hora_Ejecucion] [time](7) NULL,
	[Error] [varchar](255) NULL,
	[Fecha_Creacion] [datetime] NOT NULL,
	[Estado_Resp] [varchar](20) NOT NULL,
	[Fecha_Cinta] [date] NULL,
	[Cinta] [varchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Respaldo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[Nombre_Respaldo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[rol]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[rol](
	[rolcodigo] [int] NOT NULL,
	[rolnombre] [varchar](100) NOT NULL,
	[rolactivo] [int] NULL,
	[roldescripcion] [varchar](500) NULL,
	[rolobservaciones] [varchar](500) NULL,
 CONSTRAINT [pk_rol] PRIMARY KEY NONCLUSTERED 
(
	[rolcodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[rolempleado]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[rolempleado](
	[empcodigo] [int] NOT NULL,
	[rolcodigo] [int] NOT NULL,
	[fechainicio] [datetime] NULL,
	[fechafin] [datetime] NULL,
 CONSTRAINT [pk_rolempleado] PRIMARY KEY CLUSTERED 
(
	[empcodigo] ASC,
	[rolcodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Seguridad_Servidores]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Seguridad_Servidores](
	[NombreServidor] [nvarchar](255) NULL,
	[IPAddress] [nvarchar](50) NULL,
	[OSVersion] [nvarchar](255) NULL,
	[UltimaConexionAgenteServidor] [datetime] NULL,
	[NombreProducto] [nvarchar](255) NULL,
	[CodigoProducto] [nvarchar](100) NULL,
	[VersionProducto] [nvarchar](100) NULL,
	[VersionDAT] [nvarchar](50) NULL,
	[FechaDAT] [datetime] NULL,
	[FechaUltimaInstalacion] [datetime] NULL,
	[verProductMajor] [int] NULL,
	[verProductMinor] [int] NULL,
	[verProductRevision] [int] NULL,
	[verProductBuild] [int] NULL,
	[FechaUltimoAnalisis] [datetime] NULL,
	[UltimaAmenazaDetectada] [nvarchar](255) NULL,
	[AccionTomada] [nvarchar](255) NULL,
	[NombreReglaFirewall] [nvarchar](255) NULL,
	[ValorReglaFirewall] [nvarchar](max) NULL,
	[TipoAccionProducto] [nvarchar](100) NULL,
	[FechaNotificacionProducto] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Serv_Job]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Serv_Job](
	[ID_Serv_Job] [int] IDENTITY(1,1) NOT NULL,
	[ID_Servidor] [int] NOT NULL,
	[ID_Job] [int] NOT NULL,
	[Estado] [varchar](20) NOT NULL,
	[Fecha_Asociacion] [datetime] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Serv_Job] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Servidor_Aplicaciones]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Servidor_Aplicaciones](
	[ID_Servidor_Aplicacion] [int] IDENTITY(1,1) NOT NULL,
	[ID_Servidor] [int] NOT NULL,
	[aplcodigo] [int] NOT NULL,
	[Fecha_Inicio] [date] NULL,
	[Fecha_Fin] [date] NULL,
	[Estado_Asignacion] [varchar](20) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Servidor_Aplicacion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Servidor_IP]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Servidor_IP](
	[ID_Servidor_IP] [int] IDENTITY(1,1) NOT NULL,
	[ID_Servidor] [int] NOT NULL,
	[ID_IP] [int] NOT NULL,
	[Host_Name] [varchar](250) NOT NULL,
	[Fecha_Creacion] [datetime] NULL,
	[Fecha_Fin] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Servidor_IP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Servidores]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Servidores](
	[ID_Servidor] [int] IDENTITY(1,1) NOT NULL,
	[Nombre_Servidor] [varchar](100) NULL,
	[Monitoreo_PRTG] [varchar](250) NULL,
	[Disponibilidad] [varchar](250) NULL,
	[Observacion] [varchar](200) NULL,
	[Registro_PRTG] [varchar](100) NULL,
	[Tipo_Equipo] [varchar](100) NULL,
	[OS] [varchar](200) NULL,
	[Espacio_Disco_GB] [varchar](100) NULL,
	[Criticidad_Organizacion_1] [int] NULL,
	[Criticidad_Organizacion_2] [int] NULL,
	[Tipo_servicio] [varchar](100) NULL,
	[Ambiente_Ejecucion] [varchar](100) NULL,
	[Dia_Ejecucion_Serv] [varchar](250) NULL,
	[Hora_Serv] [varchar](250) NULL,
	[interfaz_red] [varchar](255) NULL,
	[velocidad] [varchar](50) NULL,
	[hipervisor] [varchar](100) NULL,
	[numero_discos] [int] NULL,
	[uso_disco] [varchar](255) NULL,
	[memoria_ram] [varchar](255) NULL,
	[procesador] [varchar](255) NULL,
	[tipo_disco] [varchar](10) NULL,
	[fech_despliegue] [varchar](max) NULL,
	[nucleos] [int] NULL,
	[ID_Zona] [int] NULL,
	[estcodigo] [int] NULL,
	[Tiene_Firewall] [bit] NULL,
	[DNS_Serv] [varchar](255) NULL,
	[Host_Serv] [varchar](255) NULL,
 CONSTRAINT [PK__ServNew__F3551DC4DC78E2D3] PRIMARY KEY CLUSTERED 
(
	[ID_Servidor] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tipo_acceso]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tipo_acceso](
	[tipaccesocodigo] [int] NOT NULL,
	[tipaccesonombre] [varchar](50) NOT NULL,
	[tipaccesoactivo] [int] NULL,
	[tipaccesodescripcion] [varchar](500) NULL,
	[tipaccesoobservacion] [varchar](500) NULL,
 CONSTRAINT [pk_tipo_acceso] PRIMARY KEY NONCLUSTERED 
(
	[tipaccesocodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tipo_catastro]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tipo_catastro](
	[tipccodigo] [int] NOT NULL,
	[tipcnombre] [varchar](50) NOT NULL,
	[tipcactivo] [int] NULL,
	[tipcdescripcion] [varchar](500) NULL,
	[tipcobservacion] [varchar](500) NULL,
 CONSTRAINT [pk_tipo_catastro] PRIMARY KEY NONCLUSTERED 
(
	[tipccodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tipo_fuentedatos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tipo_fuentedatos](
	[tfdcodigo] [int] NOT NULL,
	[tfdnombre] [varchar](200) NOT NULL,
	[tfdactivo] [int] NULL,
	[tfddescripcion] [varchar](250) NULL,
	[tfdobservaciones] [varchar](250) NULL,
 CONSTRAINT [pk_tipo_fuentedatos] PRIMARY KEY NONCLUSTERED 
(
	[tfdcodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tipo_integracion]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tipo_integracion](
	[intcodigo] [int] NOT NULL,
	[intnombre] [varchar](50) NOT NULL,
	[intactivo] [int] NULL,
	[intdescripcion] [varchar](500) NULL,
	[intobservacion] [varchar](500) NULL,
 CONSTRAINT [pk_tipo_integracion] PRIMARY KEY NONCLUSTERED 
(
	[intcodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Tipo_Respaldo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Tipo_Respaldo](
	[ID_Tipo_Respaldo] [int] IDENTITY(1,1) NOT NULL,
	[Nombre_Tipo] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Tipo_Respaldo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tipo_usuario]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tipo_usuario](
	[tipcodigo] [int] NOT NULL,
	[tipnombre] [varchar](50) NOT NULL,
	[tipactivo] [int] NULL,
	[tipdescripcion] [varchar](500) NULL,
	[tipobservacion] [varchar](500) NULL,
 CONSTRAINT [pk_tipo_usuario] PRIMARY KEY NONCLUSTERED 
(
	[tipcodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[usuario]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[usuario](
	[usuariocodigo] [int] IDENTITY(1,1) NOT NULL,
	[usuariocuenta] [varchar](100) NOT NULL,
	[usuariocontrasena] [varchar](100) NOT NULL,
	[usuariocorreo] [varchar](100) NULL,
	[usuariocreacion] [datetime] NULL,
	[usuarioactivo] [int] NULL,
	[percodigo] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[usuariocodigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[usuariocuenta] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ZONA_A]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ZONA_A](
	[ID_Zona] [int] IDENTITY(1,1) NOT NULL,
	[Zona] [varchar](100) NULL,
	[Provincia] [nvarchar](255) NULL,
	[Ciudad] [nvarchar](255) NULL,
	[Canton] [nvarchar](255) NULL,
	[Locacion] [nvarchar](255) NULL,
	[Ubicacion] [nvarchar](255) NULL,
	[VCenter] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID_Zona] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[area] ADD  DEFAULT ('√Årea') FOR [aretipo]
GO
ALTER TABLE [dbo].[Auxiliar_Base] ADD  DEFAULT (getdate()) FOR [Fecha_Asignacion]
GO
ALTER TABLE [dbo].[Auxiliar_Base] ADD  DEFAULT ('activo') FOR [Estado_Auxiliar]
GO
ALTER TABLE [dbo].[Base_Servidores] ADD  DEFAULT (getdate()) FOR [Fecha_Inicio_B]
GO
ALTER TABLE [dbo].[Base_Servidores] ADD  DEFAULT ('activo') FOR [Estado_Asignacion]
GO
ALTER TABLE [dbo].[BaseDatos] ADD  DEFAULT ('activo') FOR [Estado_Base]
GO
ALTER TABLE [dbo].[bitacoraacceso] ADD  DEFAULT (getdate()) FOR [fechaacceso]
GO
ALTER TABLE [dbo].[Data_Job] ADD  DEFAULT ('activo') FOR [Estado]
GO
ALTER TABLE [dbo].[Data_Job] ADD  DEFAULT (getdate()) FOR [Fecha_Asociacion]
GO
ALTER TABLE [dbo].[DataStore] ADD  DEFAULT ('activo') FOR [Estado]
GO
ALTER TABLE [dbo].[DataStore] ADD  DEFAULT (getdate()) FOR [Fecha_Creacion]
GO
ALTER TABLE [dbo].[IP] ADD  DEFAULT ((1)) FOR [Estado_Ip]
GO
ALTER TABLE [dbo].[Jobs] ADD  DEFAULT ('activo') FOR [Estado]
GO
ALTER TABLE [dbo].[Jobs] ADD  DEFAULT (getdate()) FOR [Fecha_Creacion]
GO
ALTER TABLE [dbo].[Jobs_Respaldo] ADD  DEFAULT ('activo') FOR [Estado]
GO
ALTER TABLE [dbo].[Jobs_Respaldo] ADD  DEFAULT (getdate()) FOR [Fecha_Asociacion]
GO
ALTER TABLE [dbo].[Respaldo] ADD  CONSTRAINT [DF_Respaldo_es_historico]  DEFAULT ((0)) FOR [es_historico]
GO
ALTER TABLE [dbo].[Respaldo] ADD  CONSTRAINT [DF_Respaldo_estado_respaldo]  DEFAULT ('activo') FOR [estado_respaldo]
GO
ALTER TABLE [dbo].[Respaldo] ADD  CONSTRAINT [DF_Respaldo_respaldo_completo]  DEFAULT ((1)) FOR [respaldo_completo]
GO
ALTER TABLE [dbo].[Respaldo] ADD  DEFAULT ((0)) FOR [antivirus_activo]
GO
ALTER TABLE [dbo].[Respaldos] ADD  DEFAULT (getdate()) FOR [Fecha_Creacion]
GO
ALTER TABLE [dbo].[Respaldos] ADD  DEFAULT ('activo') FOR [Estado_Resp]
GO
ALTER TABLE [dbo].[Serv_Job] ADD  DEFAULT ('activo') FOR [Estado]
GO
ALTER TABLE [dbo].[Serv_Job] ADD  DEFAULT (getdate()) FOR [Fecha_Asociacion]
GO
ALTER TABLE [dbo].[Servidor_Aplicaciones] ADD  DEFAULT ('activo') FOR [Estado_Asignacion]
GO
ALTER TABLE [dbo].[usuario] ADD  DEFAULT (getdate()) FOR [usuariocreacion]
GO
ALTER TABLE [dbo].[usuario] ADD  DEFAULT ((1)) FOR [usuarioactivo]
GO
ALTER TABLE [dbo].[Activo_Fisico]  WITH CHECK ADD  CONSTRAINT [FK_Activo_Fisico_ZONA_A] FOREIGN KEY([ID_Zona])
REFERENCES [dbo].[ZONA_A] ([ID_Zona])
GO
ALTER TABLE [dbo].[Activo_Fisico] CHECK CONSTRAINT [FK_Activo_Fisico_ZONA_A]
GO
ALTER TABLE [dbo].[aplicativo]  WITH CHECK ADD  CONSTRAINT [fk_aplicativo_control] FOREIGN KEY([concodigo])
REFERENCES [dbo].[control] ([concodigo])
GO
ALTER TABLE [dbo].[aplicativo] CHECK CONSTRAINT [fk_aplicativo_control]
GO
ALTER TABLE [dbo].[aplicativo]  WITH CHECK ADD  CONSTRAINT [FK_aplicativo_criticidad] FOREIGN KEY([cricodigo])
REFERENCES [dbo].[criticidad] ([cricodigo])
GO
ALTER TABLE [dbo].[aplicativo] CHECK CONSTRAINT [FK_aplicativo_criticidad]
GO
ALTER TABLE [dbo].[aplicativo]  WITH CHECK ADD  CONSTRAINT [fk_aplicativo_desarrollo] FOREIGN KEY([descodigo])
REFERENCES [dbo].[desarrollo] ([descodigo])
GO
ALTER TABLE [dbo].[aplicativo] CHECK CONSTRAINT [fk_aplicativo_desarrollo]
GO
ALTER TABLE [dbo].[aplicativo]  WITH CHECK ADD  CONSTRAINT [fk_aplicativo_estado] FOREIGN KEY([estcodigo])
REFERENCES [dbo].[estado] ([estcodigo])
GO
ALTER TABLE [dbo].[aplicativo] CHECK CONSTRAINT [fk_aplicativo_estado]
GO
ALTER TABLE [dbo].[aplicativo]  WITH CHECK ADD  CONSTRAINT [fk_aplicativo_fuente] FOREIGN KEY([fuecodigo])
REFERENCES [dbo].[fuente] ([fuecodigo])
GO
ALTER TABLE [dbo].[aplicativo] CHECK CONSTRAINT [fk_aplicativo_fuente]
GO
ALTER TABLE [dbo].[aplicativo]  WITH CHECK ADD  CONSTRAINT [fk_aplicativo_herramienta] FOREIGN KEY([hercodigo])
REFERENCES [dbo].[herramienta] ([hercodigo])
GO
ALTER TABLE [dbo].[aplicativo] CHECK CONSTRAINT [fk_aplicativo_herramienta]
GO
ALTER TABLE [dbo].[aplicativo]  WITH CHECK ADD  CONSTRAINT [fk_aplicativo_tipo_acceso] FOREIGN KEY([tipaccesocodigo])
REFERENCES [dbo].[tipo_acceso] ([tipaccesocodigo])
GO
ALTER TABLE [dbo].[aplicativo] CHECK CONSTRAINT [fk_aplicativo_tipo_acceso]
GO
ALTER TABLE [dbo].[aplicativo]  WITH CHECK ADD  CONSTRAINT [fk_aplicativo_tipo_catastro] FOREIGN KEY([tipccodigo])
REFERENCES [dbo].[tipo_catastro] ([tipccodigo])
GO
ALTER TABLE [dbo].[aplicativo] CHECK CONSTRAINT [fk_aplicativo_tipo_catastro]
GO
ALTER TABLE [dbo].[aplicativo]  WITH CHECK ADD  CONSTRAINT [fk_aplicativo_tipo_fuentedatos] FOREIGN KEY([tfdcodigo])
REFERENCES [dbo].[tipo_fuentedatos] ([tfdcodigo])
GO
ALTER TABLE [dbo].[aplicativo] CHECK CONSTRAINT [fk_aplicativo_tipo_fuentedatos]
GO
ALTER TABLE [dbo].[aplicativo]  WITH CHECK ADD  CONSTRAINT [fk_aplicativo_tipo_integracion] FOREIGN KEY([intcodigo])
REFERENCES [dbo].[tipo_integracion] ([intcodigo])
GO
ALTER TABLE [dbo].[aplicativo] CHECK CONSTRAINT [fk_aplicativo_tipo_integracion]
GO
ALTER TABLE [dbo].[aplicativo]  WITH CHECK ADD  CONSTRAINT [fk_aplicativo_tipo_usuario] FOREIGN KEY([tipcodigo])
REFERENCES [dbo].[tipo_usuario] ([tipcodigo])
GO
ALTER TABLE [dbo].[aplicativo] CHECK CONSTRAINT [fk_aplicativo_tipo_usuario]
GO
ALTER TABLE [dbo].[areaempleado]  WITH CHECK ADD  CONSTRAINT [FK_areaempleado_area] FOREIGN KEY([arecodigo])
REFERENCES [dbo].[area] ([arecodigo])
GO
ALTER TABLE [dbo].[areaempleado] CHECK CONSTRAINT [FK_areaempleado_area]
GO
ALTER TABLE [dbo].[areaempleado]  WITH CHECK ADD  CONSTRAINT [FK_areaempleado_empleado] FOREIGN KEY([empcodigo])
REFERENCES [dbo].[empleado] ([empcodigo])
GO
ALTER TABLE [dbo].[areaempleado] CHECK CONSTRAINT [FK_areaempleado_empleado]
GO
ALTER TABLE [dbo].[Auxiliar_Base]  WITH CHECK ADD  CONSTRAINT [FK_Auxiliar_Base_Base] FOREIGN KEY([ID_Base])
REFERENCES [dbo].[BaseDatos] ([ID_Base])
GO
ALTER TABLE [dbo].[Auxiliar_Base] CHECK CONSTRAINT [FK_Auxiliar_Base_Base]
GO
ALTER TABLE [dbo].[Auxiliar_Base]  WITH CHECK ADD  CONSTRAINT [FK_Auxiliar_Base_Empleado] FOREIGN KEY([empcodigo])
REFERENCES [dbo].[empleado] ([empcodigo])
GO
ALTER TABLE [dbo].[Auxiliar_Base] CHECK CONSTRAINT [FK_Auxiliar_Base_Empleado]
GO
ALTER TABLE [dbo].[Base_Servidores]  WITH CHECK ADD  CONSTRAINT [FK_Base_Servidores_Base] FOREIGN KEY([ID_Base])
REFERENCES [dbo].[BaseDatos] ([ID_Base])
GO
ALTER TABLE [dbo].[Base_Servidores] CHECK CONSTRAINT [FK_Base_Servidores_Base]
GO
ALTER TABLE [dbo].[Base_Servidores]  WITH CHECK ADD  CONSTRAINT [FK_Base_Servidores_Servidor] FOREIGN KEY([ID_Servidor])
REFERENCES [dbo].[Servidores] ([ID_Servidor])
GO
ALTER TABLE [dbo].[Base_Servidores] CHECK CONSTRAINT [FK_Base_Servidores_Servidor]
GO
ALTER TABLE [dbo].[bitacoraacceso]  WITH CHECK ADD  CONSTRAINT [fk_bitacora_usuario] FOREIGN KEY([usuariocodigo])
REFERENCES [dbo].[usuario] ([usuariocodigo])
GO
ALTER TABLE [dbo].[bitacoraacceso] CHECK CONSTRAINT [fk_bitacora_usuario]
GO
ALTER TABLE [dbo].[contrato_aplicativo]  WITH CHECK ADD  CONSTRAINT [fk_contrato_aplicativo_aplicativo] FOREIGN KEY([aplcodigo])
REFERENCES [dbo].[aplicativo] ([aplcodigo])
GO
ALTER TABLE [dbo].[contrato_aplicativo] CHECK CONSTRAINT [fk_contrato_aplicativo_aplicativo]
GO
ALTER TABLE [dbo].[Data_Job]  WITH CHECK ADD FOREIGN KEY([ID_DataStore])
REFERENCES [dbo].[DataStore] ([ID_DataStore])
GO
ALTER TABLE [dbo].[Data_Job]  WITH CHECK ADD FOREIGN KEY([ID_Job])
REFERENCES [dbo].[Jobs] ([ID_Job])
GO
ALTER TABLE [dbo].[Empleado_Activo]  WITH CHECK ADD  CONSTRAINT [FK_Empleado_Activo_empleado] FOREIGN KEY([EmpCodigo])
REFERENCES [dbo].[empleado] ([empcodigo])
GO
ALTER TABLE [dbo].[Empleado_Activo] CHECK CONSTRAINT [FK_Empleado_Activo_empleado]
GO
ALTER TABLE [dbo].[Empleado_Activo]  WITH CHECK ADD  CONSTRAINT [FK_EmpleadoActivo_Activo] FOREIGN KEY([ID_Activo_Fisico])
REFERENCES [dbo].[Activo_Fisico] ([id_activo_fisico])
GO
ALTER TABLE [dbo].[Empleado_Activo] CHECK CONSTRAINT [FK_EmpleadoActivo_Activo]
GO
ALTER TABLE [dbo].[IP]  WITH CHECK ADD  CONSTRAINT [FK_IP_Empleado] FOREIGN KEY([ID_Responsable])
REFERENCES [dbo].[empleado] ([empcodigo])
GO
ALTER TABLE [dbo].[IP] CHECK CONSTRAINT [FK_IP_Empleado]
GO
ALTER TABLE [dbo].[Jobs_Respaldo]  WITH CHECK ADD FOREIGN KEY([ID_Job])
REFERENCES [dbo].[Jobs] ([ID_Job])
GO
ALTER TABLE [dbo].[Jobs_Respaldo]  WITH CHECK ADD FOREIGN KEY([ID_Respaldo])
REFERENCES [dbo].[Respaldos] ([ID_Respaldo])
GO
ALTER TABLE [dbo].[perfilempleado]  WITH CHECK ADD  CONSTRAINT [FK_perfilempleado_empleado] FOREIGN KEY([empcodigo])
REFERENCES [dbo].[empleado] ([empcodigo])
GO
ALTER TABLE [dbo].[perfilempleado] CHECK CONSTRAINT [FK_perfilempleado_empleado]
GO
ALTER TABLE [dbo].[perfilempleado]  WITH CHECK ADD  CONSTRAINT [FK_perfilempleado_perfil] FOREIGN KEY([percodigo])
REFERENCES [dbo].[perfil] ([percodigo])
GO
ALTER TABLE [dbo].[perfilempleado] CHECK CONSTRAINT [FK_perfilempleado_perfil]
GO
ALTER TABLE [dbo].[Respaldos]  WITH CHECK ADD FOREIGN KEY([ID_Frecuencia])
REFERENCES [dbo].[Frecuencia_Respaldo] ([ID_Frecuencia])
GO
ALTER TABLE [dbo].[Respaldos]  WITH CHECK ADD FOREIGN KEY([ID_Tipo_Respaldo])
REFERENCES [dbo].[Tipo_Respaldo] ([ID_Tipo_Respaldo])
GO
ALTER TABLE [dbo].[rolempleado]  WITH CHECK ADD  CONSTRAINT [FK_rolempleado_empleado] FOREIGN KEY([empcodigo])
REFERENCES [dbo].[empleado] ([empcodigo])
GO
ALTER TABLE [dbo].[rolempleado] CHECK CONSTRAINT [FK_rolempleado_empleado]
GO
ALTER TABLE [dbo].[rolempleado]  WITH CHECK ADD  CONSTRAINT [fk_rolempleado_rol] FOREIGN KEY([rolcodigo])
REFERENCES [dbo].[rol] ([rolcodigo])
GO
ALTER TABLE [dbo].[rolempleado] CHECK CONSTRAINT [fk_rolempleado_rol]
GO
ALTER TABLE [dbo].[Serv_Job]  WITH CHECK ADD FOREIGN KEY([ID_Job])
REFERENCES [dbo].[Jobs] ([ID_Job])
GO
ALTER TABLE [dbo].[Serv_Job]  WITH CHECK ADD FOREIGN KEY([ID_Servidor])
REFERENCES [dbo].[Servidores] ([ID_Servidor])
GO
ALTER TABLE [dbo].[Servidor_Aplicaciones]  WITH CHECK ADD  CONSTRAINT [FK_ServAp_ServNew] FOREIGN KEY([ID_Servidor])
REFERENCES [dbo].[Servidores] ([ID_Servidor])
GO
ALTER TABLE [dbo].[Servidor_Aplicaciones] CHECK CONSTRAINT [FK_ServAp_ServNew]
GO
ALTER TABLE [dbo].[Servidor_Aplicaciones]  WITH CHECK ADD  CONSTRAINT [FK_ServidorAplicaciones_Aplicativo] FOREIGN KEY([aplcodigo])
REFERENCES [dbo].[aplicativo] ([aplcodigo])
GO
ALTER TABLE [dbo].[Servidor_Aplicaciones] CHECK CONSTRAINT [FK_ServidorAplicaciones_Aplicativo]
GO
ALTER TABLE [dbo].[Servidor_IP]  WITH CHECK ADD  CONSTRAINT [FK_IP] FOREIGN KEY([ID_IP])
REFERENCES [dbo].[IP] ([ID_IP])
GO
ALTER TABLE [dbo].[Servidor_IP] CHECK CONSTRAINT [FK_IP]
GO
ALTER TABLE [dbo].[Servidor_IP]  WITH CHECK ADD  CONSTRAINT [FK_Servidor] FOREIGN KEY([ID_Servidor])
REFERENCES [dbo].[Servidores] ([ID_Servidor])
GO
ALTER TABLE [dbo].[Servidor_IP] CHECK CONSTRAINT [FK_Servidor]
GO
ALTER TABLE [dbo].[Servidores]  WITH CHECK ADD  CONSTRAINT [FK_ServNew_estado] FOREIGN KEY([estcodigo])
REFERENCES [dbo].[estado] ([estcodigo])
GO
ALTER TABLE [dbo].[Servidores] CHECK CONSTRAINT [FK_ServNew_estado]
GO
ALTER TABLE [dbo].[Servidores]  WITH CHECK ADD  CONSTRAINT [FK_ServNew_ZONA_A] FOREIGN KEY([ID_Zona])
REFERENCES [dbo].[ZONA_A] ([ID_Zona])
GO
ALTER TABLE [dbo].[Servidores] CHECK CONSTRAINT [FK_ServNew_ZONA_A]
GO
ALTER TABLE [dbo].[usuario]  WITH CHECK ADD  CONSTRAINT [fk_usuario_perfil] FOREIGN KEY([percodigo])
REFERENCES [dbo].[perfil] ([percodigo])
GO
ALTER TABLE [dbo].[usuario] CHECK CONSTRAINT [fk_usuario_perfil]
GO
ALTER TABLE [dbo].[Auxiliar_Base]  WITH CHECK ADD  CONSTRAINT [CK_Estado_Auxiliar] CHECK  (([Estado_Auxiliar]='inactivo' OR [Estado_Auxiliar]='activo'))
GO
ALTER TABLE [dbo].[Auxiliar_Base] CHECK CONSTRAINT [CK_Estado_Auxiliar]
GO
ALTER TABLE [dbo].[Auxiliar_Base]  WITH CHECK ADD  CONSTRAINT [CK_Tipo_Auxiliar] CHECK  (([Tipo_Auxiliar]='secundario' OR [Tipo_Auxiliar]='principal'))
GO
ALTER TABLE [dbo].[Auxiliar_Base] CHECK CONSTRAINT [CK_Tipo_Auxiliar]
GO
ALTER TABLE [dbo].[Base_Servidores]  WITH CHECK ADD  CONSTRAINT [CK_Estado_Asignacion] CHECK  (([Estado_Asignacion]='inactivo' OR [Estado_Asignacion]='activo'))
GO
ALTER TABLE [dbo].[Base_Servidores] CHECK CONSTRAINT [CK_Estado_Asignacion]
GO
ALTER TABLE [dbo].[Data_Job]  WITH CHECK ADD CHECK  (([Estado]='inactivo' OR [Estado]='activo'))
GO
ALTER TABLE [dbo].[DataStore]  WITH CHECK ADD CHECK  (([Estado]='inactivo' OR [Estado]='activo'))
GO
ALTER TABLE [dbo].[Jobs]  WITH CHECK ADD CHECK  (([Dia_Ejecucion]='domingo' OR [Dia_Ejecucion]='s√°bado' OR [Dia_Ejecucion]='viernes' OR [Dia_Ejecucion]='jueves' OR [Dia_Ejecucion]='mi√©rcoles' OR [Dia_Ejecucion]='martes' OR [Dia_Ejecucion]='lunes'))
GO
ALTER TABLE [dbo].[Jobs]  WITH CHECK ADD CHECK  (([Estado]='inactivo' OR [Estado]='activo'))
GO
ALTER TABLE [dbo].[Jobs_Respaldo]  WITH CHECK ADD CHECK  (([Estado]='inactivo' OR [Estado]='activo'))
GO
ALTER TABLE [dbo].[Respaldos]  WITH CHECK ADD CHECK  (([Calendario]='diario' OR [Calendario]='semanal' OR [Calendario]='mensual' OR [Calendario]='manual'))
GO
ALTER TABLE [dbo].[Respaldos]  WITH CHECK ADD CHECK  (([Dia_Ejecucion]='domingo' OR [Dia_Ejecucion]='s√°bado' OR [Dia_Ejecucion]='viernes' OR [Dia_Ejecucion]='jueves' OR [Dia_Ejecucion]='mi√©rcoles' OR [Dia_Ejecucion]='martes' OR [Dia_Ejecucion]='lunes'))
GO
ALTER TABLE [dbo].[Respaldos]  WITH CHECK ADD CHECK  (([Estado_Resp]='inactivo' OR [Estado_Resp]='activo'))
GO
ALTER TABLE [dbo].[Serv_Job]  WITH CHECK ADD CHECK  (([Estado]='inactivo' OR [Estado]='activo'))
GO
/****** Object:  StoredProcedure [dbo].[add_activo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Insertar nuevo activo f√≠sico
CREATE PROCEDURE [dbo].[add_activo]
    @Naturaleza NVARCHAR(50),
    @Activo NVARCHAR(50),
    @Gestion_TIC NVARCHAR(50),
    @Descripcion_Activo NVARCHAR(MAX),
    @Etiqueta_Activo_Fijo NVARCHAR(150),
    @Codigo_activo_Fijo_EBS NVARCHAR(50),
    @Centro_Costo NVARCHAR(50),
    @Fabricante NVARCHAR(100),
    @Modelo NVARCHAR(150),
    @Serie NVARCHAR(100),
    @Num_Contrato NVARCHAR(150),
    @Fecha_Recepcion DATETIME,
    @Caducidad_Garantia DATETIME,
    @ID_Zona INT,
    @Precio_Compra DECIMAL(18,2),
    @Ubicacion_Desc NVARCHAR(MAX),
    @Estado NVARCHAR(50)
AS
BEGIN
    INSERT INTO dbo.Activo_Fisico (
        Naturaleza, Activo, Gestion_TIC, Descripcion_Activo, Etiqueta_Activo_Fijo,
        Codigo_activo_Fijo_EBS, Centro_Costo, Fabricante, Modelo, Serie, Num_Contrato,
        Fecha_Recepcion, Caducidad_Garantia, ID_Zona, Precio_Compra, Ubicacion_Desc, Estado
    )
    VALUES (
        @Naturaleza, @Activo, @Gestion_TIC, @Descripcion_Activo, @Etiqueta_Activo_Fijo,
        @Codigo_activo_Fijo_EBS, @Centro_Costo, @Fabricante, @Modelo, @Serie, @Num_Contrato,
        @Fecha_Recepcion, @Caducidad_Garantia, @ID_Zona, @Precio_Compra, @Ubicacion_Desc, @Estado
    );
END;
GO
/****** Object:  StoredProcedure [dbo].[add_asignacion]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[add_asignacion]
    @EmpCodigo INT,
    @ID_Activo_Fisico INT
AS
BEGIN
    -- Validar existencia del activo
    IF NOT EXISTS (
        SELECT 1 FROM Activo_Fisico
        WHERE id_activo_fisico = @ID_Activo_Fisico
    )
    BEGIN
        RAISERROR('El activo f√≠sico no existe.', 16, 1);
        RETURN;
    END;

    -- Validar existencia del empleado
    IF NOT EXISTS (
        SELECT 1 FROM empleado
        WHERE empcodigo = @EmpCodigo
    )
    BEGIN
        RAISERROR('El empleado no existe.', 16, 1);
        RETURN;
    END;

    -- Insertar nueva asignaci√≥n sin validar si ya est√° asignado
    INSERT INTO Empleado_Activo (EmpCodigo, ID_Activo_Fisico, Fecha_Asignacion)
    VALUES (@EmpCodigo, @ID_Activo_Fisico, GETDATE());
END;
GO
/****** Object:  StoredProcedure [dbo].[asignar_empleado_activo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[asignar_empleado_activo]
    @ID_Activo_Fisico INT,
    @EmpCodigo INT
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO Empleado_Activo (
        ID_Activo_Fisico,
        EmpCodigo,
        Fecha_Asignacion,
        Estado
    )
    VALUES (
        @ID_Activo_Fisico,
        @EmpCodigo,
        GETDATE(),
        'Asignado'
    );

    SELECT 'asignado' AS status, 'Empleado asignado correctamente.' AS mensaje;
END
GO
/****** Object:  StoredProcedure [dbo].[AssignAplicacionToServidor]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- üîπ AssignAplicacionToServidor
CREATE   PROCEDURE [dbo].[AssignAplicacionToServidor]
    @ID_Servidor INT,
    @aplcodigo INT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM Servidores WHERE ID_Servidor = @ID_Servidor)
    BEGIN
        RAISERROR('El servidor no existe.', 16, 1);
        RETURN;
    END

    IF NOT EXISTS (SELECT 1 FROM aplicativo WHERE aplcodigo = @aplcodigo)
    BEGIN
        RAISERROR('La aplicaci√≥n no existe.', 16, 1);
        RETURN;
    END

    IF EXISTS (
        SELECT 1 FROM Servidor_Aplicaciones
        WHERE ID_Servidor = @ID_Servidor AND aplcodigo = @aplcodigo AND Estado_Asignacion = 'activo'
    )
    BEGIN
        RAISERROR('Ya existe una asignaci√≥n activa.', 16, 1);
        RETURN;
    END

    INSERT INTO Servidor_Aplicaciones (ID_Servidor, aplcodigo, Fecha_Inicio, Estado_Asignacion)
    VALUES (@ID_Servidor, @aplcodigo, GETDATE(), 'activo');
END
GO
/****** Object:  StoredProcedure [dbo].[AssignAuxiliarToBase]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AssignAuxiliarToBase]
    @ID_Base INT,
    @empcodigo INT,
    @Tipo_Auxiliar VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;

    -- üîç Validar existencia de base activa
    IF NOT EXISTS (
        SELECT 1 FROM BaseDatos 
        WHERE ID_Base = @ID_Base AND Estado_Base = 'activo'
    )
    BEGIN
        RAISERROR('La base no existe o est√° inactiva.', 16, 1);
        RETURN;
    END

    -- üîç Validar existencia de empleado habilitado
    IF NOT EXISTS (
        SELECT 1 FROM empleado 
        WHERE empcodigo = @empcodigo AND empactivo = 1
    )
    BEGIN
        RAISERROR('El empleado no existe o est√° deshabilitado.', 16, 1);
        RETURN;
    END

    -- ‚úÖ Insertar nuevo auxiliar
    INSERT INTO Auxiliar_Base (ID_Base, empcodigo, Tipo_Auxiliar, Estado_Auxiliar)
    VALUES (@ID_Base, @empcodigo, @Tipo_Auxiliar, 'activo');

    -- üì§ Retorno formal para backend
    SELECT SCOPE_IDENTITY() AS ID_Auxiliar_Base, 'asignado' AS status;
END
GO
/****** Object:  StoredProcedure [dbo].[AssignBaseToServer]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- üîπ Asignar base a servidor
CREATE   PROCEDURE [dbo].[AssignBaseToServer]
    @ID_Base INT,
    @ID_Servidor INT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM BaseDatos WHERE ID_Base = @ID_Base)
    BEGIN
        RAISERROR('La base de datos no existe.', 16, 1);
        RETURN;
    END

    IF NOT EXISTS (SELECT 1 FROM Servidores WHERE ID_Servidor = @ID_Servidor)
    BEGIN
        RAISERROR('El servidor no existe.', 16, 1);
        RETURN;
    END

    IF EXISTS (
        SELECT 1 FROM Base_Servidores
        WHERE ID_Base = @ID_Base AND ID_Servidor = @ID_Servidor AND Estado_Asignacion = 'activo'
    )
    BEGIN
        RAISERROR('La base ya est√° asignada a este servidor.', 16, 1);
        RETURN;
    END

    INSERT INTO Base_Servidores (ID_Base, ID_Servidor)
    VALUES (@ID_Base, @ID_Servidor);
END
GO
/****** Object:  StoredProcedure [dbo].[AssignIPToServer]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AssignIPToServer]
    @ID_IP INT,
    @ID_Servidor INT,
    @Host_Name VARCHAR(250),
    @Fecha_Creacion DATETIME
AS
BEGIN
    -- Validaci√≥n: solo IPs disponibles
    IF EXISTS (SELECT 1 FROM Servidor_IP WHERE ID_IP = @ID_IP)
    BEGIN
        RAISERROR('La IP ya est√° asignada a un servidor.', 16, 1)
        RETURN
    END

    INSERT INTO Servidor_IP (ID_Servidor, ID_IP, Host_Name, Fecha_Creacion)
    VALUES (@ID_Servidor, @ID_IP, @Host_Name, @Fecha_Creacion)

    -- Actualiza estado de IP a ocupada
    UPDATE IP SET Estado_Ip = 1 WHERE ID_IP = @ID_IP
END
GO
/****** Object:  StoredProcedure [dbo].[count_aplicativos_activos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[count_aplicativos_activos]
AS
BEGIN
    SELECT COUNT(*) AS total_activos
    FROM aplicativo
    WHERE aplactivo = 1;
END
GO
/****** Object:  StoredProcedure [dbo].[create_activo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[create_activo]
    @Naturaleza NVARCHAR(50),
    @Activo NVARCHAR(50),
    @Gestion_TIC NVARCHAR(50),
    @Descripcion_Activo NVARCHAR(MAX),
    @Etiqueta_Activo_Fijo NVARCHAR(150),
    @Codigo_activo_Fijo_EBS NVARCHAR(50),
    @Centro_Costo NVARCHAR(50),
    @Fabricante NVARCHAR(100),
    @Modelo NVARCHAR(150),
    @Serie NVARCHAR(100),
    @Num_Contrato NVARCHAR(150),
    @Fecha_Recepcion DATETIME,
    @Caducidad_Garantia DATETIME,
    @ID_Zona INT,
    @Precio_Compra DECIMAL(18,2),
    @Ubicacion_Desc NVARCHAR(MAX),
    @Estado_activo NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM ZONA_A WHERE ID_Zona = @ID_Zona)
    BEGIN
        SELECT 'error' AS status, 'Zona no v√°lida' AS mensaje;
        RETURN;
    END

    INSERT INTO Activo_Fisico (
        Naturaleza, Activo, Gestion_TIC, Descripcion_Activo, Etiqueta_Activo_Fijo,
        Codigo_activo_Fijo_EBS, Centro_Costo, Fabricante, Modelo, Serie, Num_Contrato,
        Fecha_Recepcion, Caducidad_Garantia, ID_Zona, Precio_Compra, Ubicacion_Desc, Estado_activo
    )
    VALUES (
        @Naturaleza, @Activo, @Gestion_TIC, @Descripcion_Activo, @Etiqueta_Activo_Fijo,
        @Codigo_activo_Fijo_EBS, @Centro_Costo, @Fabricante, @Modelo, @Serie, @Num_Contrato,
        @Fecha_Recepcion, @Caducidad_Garantia, @ID_Zona, @Precio_Compra, @Ubicacion_Desc, @Estado_activo
    );

    SELECT 'insertado' AS status, SCOPE_IDENTITY() AS id_activo_fisico;
END
GO
/****** Object:  StoredProcedure [dbo].[delete_aplicativo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[delete_aplicativo]
    @aplcodigo INT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM aplicativo WHERE aplcodigo = @aplcodigo)
        THROW 50200, 'El aplicativo especificado no existe.', 1;

    UPDATE aplicativo
    SET aplactivo = 0,
        aplfechaactualizacion = GETDATE()
    WHERE aplcodigo = @aplcodigo;
END
GO
/****** Object:  StoredProcedure [dbo].[delete_asignacion]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[delete_asignacion]
    @ID_Empleado_Activo INT
AS
BEGIN
    DELETE FROM Empleado_Activo
    WHERE ID_Empleado_Activo = @ID_Empleado_Activo;
END;
GO
/****** Object:  StoredProcedure [dbo].[delete_employee]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- üîÑ Eliminar responsable (desactivaci√≥n l√≥gica)
CREATE PROCEDURE [dbo].[delete_employee]
    @empcodigo INT
AS
BEGIN
    UPDATE empleado
    SET empactivo = 0
    WHERE empcodigo = @empcodigo;

    SELECT 'deshabilitado' AS status;
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteBaseDatos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DeleteBaseDatos]
    @ID_Base INT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM BaseDatos WHERE ID_Base = @ID_Base AND Estado_Base = 'activo')
    BEGIN
        RAISERROR('La base ya est√° eliminada o no existe.', 16, 1);
        RETURN;
    END

    UPDATE BaseDatos
    SET Estado_Base = 'inactivo'
    WHERE ID_Base = @ID_Base;

    SELECT 'eliminado' AS status;
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteIP]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/****** 3. Eliminar IP (l√≥gico) ******/
CREATE   PROCEDURE [dbo].[DeleteIP]
    @ID_IP INT
AS
BEGIN
    UPDATE IP
    SET Estado_Ip = 0
    WHERE ID_IP = @ID_IP
END
GO
/****** Object:  StoredProcedure [dbo].[desasignar_empleado_activo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[desasignar_empleado_activo]
    @ID_Activo_Fisico INT,
    @EmpCodigo INT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (
        SELECT 1 FROM Empleado_Activo
        WHERE ID_Activo_Fisico = @ID_Activo_Fisico AND EmpCodigo = @EmpCodigo AND Estado = 'Asignado'
    )
    BEGIN
        SELECT 'error' AS status, 'No existe una asignaci√≥n activa.' AS mensaje;
        RETURN;
    END

    UPDATE Empleado_Activo
    SET Fecha_Desasignacion = GETDATE(),
        Estado = 'Finalizado'
    WHERE ID_Activo_Fisico = @ID_Activo_Fisico AND EmpCodigo = @EmpCodigo AND Estado = 'Asignado';

    SELECT 'desasignado' AS status, 'Empleado desasignado correctamente.' AS mensaje;
END
GO
/****** Object:  StoredProcedure [dbo].[DesasignarAplicacionDeServidor]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- üîπ DesasignarAplicacionDeServidor
CREATE   PROCEDURE [dbo].[DesasignarAplicacionDeServidor]
    @ID_Servidor INT,
    @aplcodigo INT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (
        SELECT 1 FROM Servidor_Aplicaciones
        WHERE ID_Servidor = @ID_Servidor AND aplcodigo = @aplcodigo AND Estado_Asignacion = 'activo'
    )
    BEGIN
        RAISERROR('No existe una asignaci√≥n activa.', 16, 1);
        RETURN;
    END

    UPDATE Servidor_Aplicaciones
    SET Estado_Asignacion = 'inactivo',
        Fecha_Fin = GETDATE()
    WHERE ID_Servidor = @ID_Servidor AND aplcodigo = @aplcodigo AND Estado_Asignacion = 'activo';
END
GO
/****** Object:  StoredProcedure [dbo].[DesasignarAuxiliarDeBase]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[DesasignarAuxiliarDeBase]
    @ID_Base INT,
    @Tipo_Auxiliar VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;

    -- üîç Validar existencia de base activa
    IF NOT EXISTS (
        SELECT 1 FROM BaseDatos 
        WHERE ID_Base = @ID_Base AND Estado_Base = 'activo'
    )
    BEGIN
        RAISERROR('La base no existe o est√° inactiva.', 16, 1);
        RETURN;
    END

    -- üîç Validar existencia de auxiliar activo del tipo indicado
    IF NOT EXISTS (
        SELECT 1 FROM Auxiliar_Base
        WHERE ID_Base = @ID_Base 
          AND Tipo_Auxiliar = @Tipo_Auxiliar 
          AND Estado_Auxiliar = 'activo'
    )
    BEGIN
        RAISERROR('No hay auxiliar activo de ese tipo para esta base.', 16, 1);
        RETURN;
    END

    -- ‚úÖ Desasignar auxiliar
    UPDATE Auxiliar_Base
    SET Estado_Auxiliar = 'inactivo',
        Fecha_Desasignacion = GETDATE()
    WHERE ID_Base = @ID_Base 
      AND Tipo_Auxiliar = @Tipo_Auxiliar 
      AND Estado_Auxiliar = 'activo';

    -- üì§ Retorno formal
    SELECT 'desasignado' AS status;
END
GO
/****** Object:  StoredProcedure [dbo].[DesasignarBaseDeServidor]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- üîπ Desasignar base de servidor
CREATE   PROCEDURE [dbo].[DesasignarBaseDeServidor]
    @ID_Base INT,
    @ID_Servidor INT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (
        SELECT 1 FROM Base_Servidores
        WHERE ID_Base = @ID_Base AND ID_Servidor = @ID_Servidor AND Estado_Asignacion = 'activo'
    )
    BEGIN
        RAISERROR('No existe una asignaci√≥n activa entre esta base y este servidor.', 16, 1);
        RETURN;
    END

    UPDATE Base_Servidores
    SET Estado_Asignacion = 'inactivo',
        Fecha_Fin_B = GETDATE()
    WHERE ID_Base = @ID_Base AND ID_Servidor = @ID_Servidor AND Estado_Asignacion = 'activo';
END
GO
/****** Object:  StoredProcedure [dbo].[disable_activo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[disable_activo]
    @id_activo_fisico INT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM Activo_Fisico WHERE id_activo_fisico = @id_activo_fisico)
    BEGIN
        SELECT 'error' AS status, 'Activo no encontrado' AS mensaje;
        RETURN;
    END

    UPDATE Activo_Fisico
    SET Estado_activo = 'Inhabilitado'
    WHERE id_activo_fisico = @id_activo_fisico;

    SELECT 'deshabilitado' AS status, 'Activo deshabilitado correctamente.' AS mensaje;
END
GO
/****** Object:  StoredProcedure [dbo].[disable_servidor]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[disable_servidor]
    @ID_Servidor INT,
    @estcodigo_inactivo INT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM Servidores WHERE ID_Servidor = @ID_Servidor)
        THROW 56020, 'Servidor no encontrado.', 1;

    IF NOT EXISTS (SELECT 1 FROM estado WHERE estcodigo = @estcodigo_inactivo AND estactivo = 0)
        THROW 56021, 'Estado inactivo inv√°lido.', 1;

    UPDATE dbo.Servidores
    SET estcodigo = @estcodigo_inactivo
    WHERE ID_Servidor = @ID_Servidor;
END
GO
/****** Object:  StoredProcedure [dbo].[disableActivo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[disableActivo]
    @id_activo_fisico INT
AS
BEGIN
    UPDATE dbo.Activo_Fisico
    SET Estado = 'Deshabilitado'
    WHERE id_activo_fisico = @id_activo_fisico;
END;
GO
/****** Object:  StoredProcedure [dbo].[edit_activo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[edit_activo]
    @id_activo_fisico INT,
    @Naturaleza NVARCHAR(50),
    @Activo NVARCHAR(50),
    @Gestion_TIC NVARCHAR(50),
    @Descripcion_Activo NVARCHAR(MAX),
    @Etiqueta_Activo_Fijo NVARCHAR(150),
    @Codigo_activo_Fijo_EBS NVARCHAR(50),
    @Centro_Costo NVARCHAR(50),
    @Fabricante NVARCHAR(100),
    @Modelo NVARCHAR(150),
    @Serie NVARCHAR(100),
    @Num_Contrato NVARCHAR(150),
    @Fecha_Recepcion DATETIME,
    @Caducidad_Garantia DATETIME,
    @ID_Zona INT,
    @Precio_Compra DECIMAL(18,2),
    @Ubicacion_Desc NVARCHAR(MAX),
    @Estado_activo NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM Activo_Fisico WHERE id_activo_fisico = @id_activo_fisico)
    BEGIN
        SELECT 'error' AS status, 'Activo no encontrado' AS mensaje;
        RETURN;
    END

    UPDATE Activo_Fisico
    SET Naturaleza = @Naturaleza,
        Activo = @Activo,
        Gestion_TIC = @Gestion_TIC,
        Descripcion_Activo = @Descripcion_Activo,
        Etiqueta_Activo_Fijo = @Etiqueta_Activo_Fijo,
        Codigo_activo_Fijo_EBS = @Codigo_activo_Fijo_EBS,
        Centro_Costo = @Centro_Costo,
        Fabricante = @Fabricante,
        Modelo = @Modelo,
        Serie = @Serie,
        Num_Contrato = @Num_Contrato,
        Fecha_Recepcion = @Fecha_Recepcion,
        Caducidad_Garantia = @Caducidad_Garantia,
        ID_Zona = @ID_Zona,
        Precio_Compra = @Precio_Compra,
        Ubicacion_Desc = @Ubicacion_Desc,
        Estado_activo = @Estado_activo
    WHERE id_activo_fisico = @id_activo_fisico;

    SELECT 'actualizado' AS status;
END
GO
/****** Object:  StoredProcedure [dbo].[get_activo_by_id]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_activo_by_id]
    @id_activo_fisico INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        af.*, 
        z.Zona AS Nombre_Zona,
        e.empnombres + ' ' + e.empapellidopaterno + ' ' + e.empapellidomaterno AS Nombre_Empleado
    FROM Activo_Fisico af
    LEFT JOIN ZONA_A z ON af.ID_Zona = z.ID_Zona
    LEFT JOIN Empleado_Activo ea ON af.id_activo_fisico = ea.ID_Activo_Fisico AND ea.Estado = 'Asignado'
    LEFT JOIN empleado e ON ea.EmpCodigo = e.empcodigo
    WHERE af.id_activo_fisico = @id_activo_fisico;
END
GO
/****** Object:  StoredProcedure [dbo].[get_activos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_activos]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        af.*, 
        z.Zona AS Nombre_Zona,
        e.empnombres + ' ' + e.empapellidopaterno + ' ' + e.empapellidomaterno AS Nombre_Empleado
    FROM Activo_Fisico af
    LEFT JOIN ZONA_A z ON af.ID_Zona = z.ID_Zona
    LEFT JOIN Empleado_Activo ea ON af.id_activo_fisico = ea.ID_Activo_Fisico AND ea.Estado = 'Asignado'
    LEFT JOIN empleado e ON ea.EmpCodigo = e.empcodigo;
END
GO
/****** Object:  StoredProcedure [dbo].[get_activos_paginados]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_activos_paginados]
    @limit INT,
    @offset INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        af.*, 
        z.Zona AS Nombre_Zona,
        e.empnombres + ' ' + e.empapellidopaterno + ' ' + e.empapellidomaterno AS Nombre_Empleado
    FROM Activo_Fisico af
    LEFT JOIN ZONA_A z ON af.ID_Zona = z.ID_Zona
    LEFT JOIN Empleado_Activo ea ON af.id_activo_fisico = ea.ID_Activo_Fisico AND ea.Estado = 'Asignado'
    LEFT JOIN empleado e ON ea.EmpCodigo = e.empcodigo
    ORDER BY af.id_activo_fisico DESC
    OFFSET @offset ROWS
    FETCH NEXT @limit ROWS ONLY;
END
GO
/****** Object:  StoredProcedure [dbo].[get_aplicativo_por_id]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Creado por Marlyn Almeida ‚Äì 20/08/2025
CREATE PROCEDURE [dbo].[get_aplicativo_por_id]
    @aplcodigo INT
AS
BEGIN
    SELECT * FROM dbo.aplicativo WHERE aplcodigo = @aplcodigo
END
GO
/****** Object:  StoredProcedure [dbo].[get_aplicativos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_aplicativos]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        -- üÜî Identificaci√≥n
        a.aplcodigo               AS aplcodigo,
        a.aplnombrecorto          AS nombreCorto,
        a.aplnombrecompleto       AS nombreCompleto,
        a.aplregistro             AS registro,
        a.aplactivo               AS estadoActivo,

        -- üìÖ Fechas
        a.aplfechaadquisicion     AS fechaAdquisicion,
        a.aplfechaimplementacion  AS fechaImplementacion,
        a.aplfechaactualizacion   AS fechaActualizacion,
        a.aplanocreacion          AS anioCreacion,

        -- üë• Usuarios
        a.aplnumerousuario        AS numeroUsuarios,
        a.apladministradorusuario AS administradorUsuario,
        a.aplvalorestimado        AS valorEstimado,
        a.apltransaccionesmensuales AS transaccionesMensuales,

        -- üè¢ Proveedor y versi√≥n
        a.aplproveedor            AS proveedor,
        a.aplversion              AS version,

        -- üîß Soporte y reinicio
        a.aplhsoportevigente      AS soporteVigente,
        a.apltiemporeinicio       AS tiempoReinicio,
        a.aplhorareinicio         AS horaReinicio,
        a.aplsla                  AS sla,

        -- üåê Acceso y seguridad
        a.aplhttps                AS https,
        a.aplenlace               AS enlace,
        a.aplrutadoctecnico       AS rutaDocTecnico,

        -- üè¢ √Årea funcional
        a.aplarearequirente       AS areaRequirente,
        a.aplsubarea              AS subarea,
        a.aplproceso              AS proceso,

        -- üìå Descripci√≥n y observaciones
        a.apldescripcion          AS descripcion,
        a.aplobservaciones        AS observaciones,

        -- üß© Relaciones sem√°nticas (c√≥digos + nombres)
        a.cricodigo               AS idCriticidad,
        c.crinombre               AS criticidad,

        a.tipccodigo              AS idTipoCatastro,
        tc.tipcnombre             AS tipoCatastro,

        a.hercodigo               AS idHerramienta,
        h.hernombre               AS herramienta,

        a.tipaccesocodigo         AS idTipoAcceso,
        ta.tipaccesonombre        AS tipoAcceso,

        a.tipcodigo               AS idTipoUsuario,
        tu.tipnombre              AS tipoUsuario,

        a.tfdcodigo               AS idTipoFuenteDatos,
        tf.tfdnombre              AS tipoFuenteDatos,

        a.estcodigo               AS idEstado,
        e.estnombre               AS estado,

        a.intcodigo               AS idTipoIntegracion,
        ti.intnombre              AS tipoIntegracion,

        a.fuecodigo               AS idFuente,
        f.fuenombre               AS fuente,

        a.descodigo               AS idDesarrollo,
        d.desnombre               AS desarrollo,

        a.concodigo               AS idControl,
        co.connombre              AS control

    FROM dbo.aplicativo a
    INNER JOIN dbo.criticidad c         ON a.cricodigo = c.cricodigo
    INNER JOIN dbo.tipo_catastro tc     ON a.tipccodigo = tc.tipccodigo
    INNER JOIN dbo.herramienta h        ON a.hercodigo = h.hercodigo
    INNER JOIN dbo.tipo_acceso ta       ON a.tipaccesocodigo = ta.tipaccesocodigo
    INNER JOIN dbo.tipo_usuario tu      ON a.tipcodigo = tu.tipcodigo
    INNER JOIN dbo.tipo_fuentedatos tf  ON a.tfdcodigo = tf.tfdcodigo
    INNER JOIN dbo.estado e             ON a.estcodigo = e.estcodigo
    INNER JOIN dbo.tipo_integracion ti  ON a.intcodigo = ti.intcodigo
    INNER JOIN dbo.fuente f             ON a.fuecodigo = f.fuecodigo
    INNER JOIN dbo.desarrollo d         ON a.descodigo = d.descodigo
    INNER JOIN dbo.control co           ON a.concodigo = co.concodigo

    ORDER BY a.aplcodigo DESC;
END;
GO
/****** Object:  StoredProcedure [dbo].[get_asignados]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[get_asignados]
AS
BEGIN
    SELECT ID_Empleado_Activo, EmpCodigo, ID_Activo_Fisico, Fecha_Asignacion
    FROM Empleado_Activo
    WHERE Fecha_Desasignacion IS NULL;
END;
GO
/****** Object:  StoredProcedure [dbo].[get_employees]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- üì• Obtener responsables con relaciones
CREATE PROCEDURE [dbo].[get_employees]
AS
BEGIN
    SELECT 
        e.empcodigo           AS empcodigo,
        e.empnombres          AS empnombres,
        e.empapellidopaterno  AS empapellidopaterno,
        e.empapellidomaterno  AS empapellidomaterno,
        e.empcedula           AS empcedula,
        e.empemail            AS empemail,
        e.empcelular          AS empcelular,
        e.emptiposangre       AS empsangre,
        e.empsexo             AS empsexo,
        e.empfechainicio      AS fechainicio,
        e.empfechacreacion    AS empfechacreacion,
        e.empactivo           AS empactivo,
        e.empdescripcion      AS empdescripcion,
        e.empobservaciones    AS empobservaciones,
        a.arenombre           AS arenombre,
        r.rolnombre           AS rolnombre,
        p.pernombre           AS pernombre
    FROM empleado e
    LEFT JOIN areaempleado ae     ON e.empcodigo = ae.empcodigo
    LEFT JOIN area a              ON ae.arecodigo = a.arecodigo
    LEFT JOIN rolempleado re      ON e.empcodigo = re.empcodigo
    LEFT JOIN rol r               ON re.rolcodigo = r.rolcodigo
    LEFT JOIN perfilempleado pe   ON e.empcodigo = pe.empcodigo
    LEFT JOIN perfil p            ON pe.percodigo = p.percodigo;
END
GO
/****** Object:  StoredProcedure [dbo].[get_employees_paginated]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_employees_paginated]
    @limit INT,
    @offset INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        e.empcodigo,
        e.empnombres,
        e.empapellidopaterno,
        e.empapellidomaterno,
        e.empcedula,
        e.empemail,
        e.empcelular,
        e.emptiposangre AS empsangre,
        e.empsexo,
        e.empfechainicio AS fechainicio,
        e.empfechacreacion AS empfechacreacion,
        e.empactivo,
        e.empdescripcion,
        e.empobservaciones,
        ae.arecodigo,
        a.arenombre,
        re.rolcodigo,
        r.rolnombre,
        pe.percodigo,
        p.pernombre
    FROM empleado e
    LEFT JOIN areaempleado ae     ON e.empcodigo = ae.empcodigo
    LEFT JOIN area a              ON ae.arecodigo = a.arecodigo
    LEFT JOIN rolempleado re      ON e.empcodigo = re.empcodigo
    LEFT JOIN rol r               ON re.rolcodigo = r.rolcodigo
    LEFT JOIN perfilempleado pe   ON e.empcodigo = pe.empcodigo
    LEFT JOIN perfil p            ON pe.percodigo = p.percodigo
    ORDER BY e.empcodigo
    OFFSET @offset ROWS
    FETCH NEXT @limit ROWS ONLY;
END
GO
/****** Object:  StoredProcedure [dbo].[get_historial]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[get_historial]
AS
BEGIN
    SELECT ID_Empleado_Activo, EmpCodigo, ID_Activo_Fisico, Fecha_Asignacion, Fecha_Desasignacion
    FROM Empleado_Activo
    ORDER BY Fecha_Asignacion DESC;
END;
GO
/****** Object:  StoredProcedure [dbo].[get_servidor_by_id]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_servidor_by_id]
    @ID_Servidor INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        S.*, E.estnombre AS Estado, Z.Zona, Z.Provincia, Z.Ciudad, Z.Canton
    FROM dbo.Servidores S
    LEFT JOIN estado E ON S.estcodigo = E.estcodigo
    LEFT JOIN ZONA_A Z ON S.ID_Zona = Z.ID_Zona
    WHERE S.ID_Servidor = @ID_Servidor;
END
GO
/****** Object:  StoredProcedure [dbo].[get_servidores]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- üîπ get_servidores
CREATE   PROCEDURE [dbo].[get_servidores]
    @estcodigo INT = NULL,
    @ID_Zona INT = NULL,
    @ID_Base INT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        S.ID_Servidor,
        S.Nombre_Servidor,
        S.Tipo_Equipo,
        S.OS,
        S.memoria_ram,
        S.procesador,
        S.numero_discos,
        S.uso_disco,
        S.Espacio_Disco_GB,
        S.Ambiente_Ejecucion,
        S.Tipo_servicio,
        S.Monitoreo_PRTG,
        S.Disponibilidad,
        S.Registro_PRTG,
        S.Observacion,
        S.Criticidad_Organizacion_1,
        S.Criticidad_Organizacion_2,
        S.Dia_Ejecucion_Serv,
        S.Hora_Serv,
        S.interfaz_red,
        S.velocidad,
        S.hipervisor,
        S.tipo_disco,
        S.fech_despliegue,
        S.nucleos,
        S.Tiene_Firewall,
        S.DNS_Serv,
        S.Host_Serv,
        E.estnombre AS Estado,
        Z.Zona,
        Z.Provincia,
        Z.Ciudad,
        Z.Canton,
        B.Nombre_Base,
        B.Nombre_Instancia
    FROM dbo.Servidores S
    LEFT JOIN dbo.estado E ON S.estcodigo = E.estcodigo
    LEFT JOIN dbo.ZONA_A Z ON S.ID_Zona = Z.ID_Zona
    LEFT JOIN dbo.Base_Servidores BS ON S.ID_Servidor = BS.ID_Servidor AND BS.Estado_Asignacion = 'activo'
    LEFT JOIN dbo.BaseDatos B ON BS.ID_Base = B.ID_Base
    WHERE (@estcodigo IS NULL OR S.estcodigo = @estcodigo)
      AND (@ID_Zona IS NULL OR S.ID_Zona = @ID_Zona)
      AND (@ID_Base IS NULL OR B.ID_Base = @ID_Base)
    ORDER BY S.Criticidad_Organizacion_1 DESC, S.Nombre_Servidor ASC;
END
GO
/****** Object:  StoredProcedure [dbo].[get_total_activos_fisicos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_total_activos_fisicos]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 'ok' AS status, COUNT(*) AS total_activos FROM Activo_Fisico;
END
GO
/****** Object:  StoredProcedure [dbo].[get_total_activos_por_estado]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[get_total_activos_por_estado]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT Estado_activo, COUNT(*) AS total
    FROM Activo_Fisico
    GROUP BY Estado_activo;

    SELECT 'ok' AS status;
END
GO
/****** Object:  StoredProcedure [dbo].[get_total_aplicativos_por_servidor]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[get_total_aplicativos_por_servidor]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        S.ID_Servidor,
        S.Nombre_Servidor,
        COUNT(A.aplcodigo) AS Total_Aplicativos
    FROM dbo.Servidores S
    LEFT JOIN dbo.Servidor_Aplicaciones A ON S.ID_Servidor = A.ID_Servidor
    GROUP BY S.ID_Servidor, S.Nombre_Servidor
    ORDER BY Total_Aplicativos ASC;
END
GO
/****** Object:  StoredProcedure [dbo].[get_total_paginas_activos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_total_paginas_activos]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT COUNT(*) AS total FROM Activo_Fisico WHERE Estado_activo = 'Activo';
END
GO
/****** Object:  StoredProcedure [dbo].[get_total_paginas_empleados]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[get_total_paginas_empleados]
AS
BEGIN
    SELECT COUNT(*) AS total FROM empleado WHERE empactivo = 1;
END
GO
/****** Object:  StoredProcedure [dbo].[get_total_por_estado]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE [dbo].[get_total_por_estado]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        e.estnombre                       AS estado,
        COUNT(*)                          AS totalAplicativos,
        SUM(CASE WHEN a.aplactivo = 1 THEN 1 ELSE 0 END) AS activos,
        SUM(CASE WHEN a.aplactivo = 0 THEN 1 ELSE 0 END) AS inactivos,
        CAST(
            100.0 * SUM(CASE WHEN a.aplactivo = 1 THEN 1 ELSE 0 END) / COUNT(*)
            AS DECIMAL(5,2)
        )                                AS porcentajeActivo
    FROM aplicativo a
    INNER JOIN estado e ON a.estcodigo = e.estcodigo
    GROUP BY e.estnombre
    ORDER BY totalAplicativos DESC;
END
GO
/****** Object:  StoredProcedure [dbo].[get_total_servidores]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_total_servidores]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT COUNT(*) AS Total_Servidores
    FROM dbo.Servidores;
END
GO
/****** Object:  StoredProcedure [dbo].[get_total_servidores_estado]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[get_total_servidores_estado]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT E.estnombre AS Estado, COUNT(S.ID_Servidor) AS Total
    FROM dbo.Servidores S
    INNER JOIN estado E ON S.estcodigo = E.estcodigo
    GROUP BY E.estnombre;
END
GO
/****** Object:  StoredProcedure [dbo].[get_total_servidores_por_estado]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_total_servidores_por_estado]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        E.estnombre AS Estado,
        COUNT(S.ID_Servidor) AS Total_Servidores
    FROM dbo.estado E
    LEFT JOIN dbo.Servidores S ON E.estcodigo = S.estcodigo
    GROUP BY E.estnombre
    ORDER BY Total_Servidores ASC;
END
GO
/****** Object:  StoredProcedure [dbo].[get_total_servidores_zona]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_total_servidores_zona]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT Z.Zona, COUNT(S.ID_Servidor) AS Total
    FROM dbo.Servidores S
    INNER JOIN ZONA_A Z ON S.ID_Zona = Z.ID_Zona
    GROUP BY Z.Zona;
END
GO
/****** Object:  StoredProcedure [dbo].[get_zonas]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[get_zonas]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT ID_Zona, Zona, Provincia, Ciudad FROM ZONA_A;
END
GO
/****** Object:  StoredProcedure [dbo].[getActivoById]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Obtener activo por ID
CREATE PROCEDURE [dbo].[getActivoById]
    @id_activo_fisico INT
AS
BEGIN
    SELECT * FROM dbo.Activo_Fisico
    WHERE id_activo_fisico = @id_activo_fisico;
END;
GO
/****** Object:  StoredProcedure [dbo].[getAllActivos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[getAllActivos]
AS
BEGIN
    SELECT 
        af.id_activo_fisico,
        af.Naturaleza,
        af.Activo,
        af.Descripcion_Activo,
        af.Etiqueta_Activo_Fijo,
        af.Codigo_activo_Fijo_EBS,
        af.Fabricante,
        af.Modelo,
        af.Serie,
        af.Num_Contrato,
        af.Fecha_Recepcion,
        af.Caducidad_Garantia,
        af.ID_Zona,
        z.Zona AS Nombre_Zona,
        af.Precio_Compra,
        af.Ubicacion_Desc,
        af.Estado,
        e.empcodigo,
        e.empnombres,
        e.empapellidopaterno,
        e.empapellidomaterno,
        ea.Fecha_Asignacion,
        ea.Fecha_Desasignacion
    FROM dbo.Activo_Fisico af
    LEFT JOIN dbo.ZONA_A z ON af.ID_Zona = z.ID_Zona
    LEFT JOIN dbo.Empleado_Activo ea ON af.id_activo_fisico = ea.ID_Activo_Fisico
    LEFT JOIN dbo.empleado e ON ea.EmpCodigo = e.empcodigo
    ORDER BY af.id_activo_fisico DESC;
END;
GO
/****** Object:  StoredProcedure [dbo].[GetAllBasesDatos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAllBasesDatos]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT * FROM BaseDatos
    WHERE Estado_Base = 'activo'
    ORDER BY Nombre_Base;
END
GO
/****** Object:  StoredProcedure [dbo].[GetAllEmployee]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- üßæ Obtener todos los empleados (uso interno)
CREATE PROCEDURE [dbo].[GetAllEmployee]
AS
BEGIN
    SELECT * FROM empleado;
END
GO
/****** Object:  StoredProcedure [dbo].[GetAllIPs]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** 4. Obtener todas las IPs ******/
CREATE   PROCEDURE [dbo].[GetAllIPs]
AS
BEGIN
    SELECT * FROM IP
END
GO
/****** Object:  StoredProcedure [dbo].[GetAssignedIPs]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetAssignedIPs]
AS
BEGIN
    SELECT 
        IP.ID_IP,
        IP.Direccion_IP,
        IP.Estado_Ip,
        S.Nombre_Servidor,
        SI.Host_Name,
        SI.Fecha_Creacion
    FROM IP
    INNER JOIN Servidor_IP SI ON IP.ID_IP = SI.ID_IP
    INNER JOIN Servidores S ON SI.ID_Servidor = S.ID_Servidor
END
GO
/****** Object:  StoredProcedure [dbo].[GetBaseDetalle]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[GetBaseDetalle]
    @ID_Base INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        B.ID_Base,
        B.Nombre_Base,
        B.Nombre_Instancia,
        B.Tipo_Base,
        B.Descripcion,

        -- Informaci√≥n del servidor asignado
        S.ID_Servidor,
        S.Nombre_Servidor,
        S.fech_despliegue AS Fecha_Despliegue,

        -- Auxiliar principal
        E.empnombres + ' ' + E.empapellidopaterno AS Auxiliar_Principal,

        -- Auxiliar secundario
        E2.empnombres + ' ' + E2.empapellidopaterno AS Auxiliar_Secundario

    FROM BaseDatos B
    LEFT JOIN Base_Servidores BS ON B.ID_Base = BS.ID_Base AND BS.Estado_Asignacion = 'activo'
    LEFT JOIN Servidores S ON BS.ID_Servidor = S.ID_Servidor

    LEFT JOIN Auxiliar_Base AB1 ON B.ID_Base = AB1.ID_Base AND AB1.Tipo_Auxiliar = 'principal' AND AB1.Estado_Auxiliar = 'activo'
    LEFT JOIN empleado E ON AB1.empcodigo = E.empcodigo

    LEFT JOIN Auxiliar_Base AB2 ON B.ID_Base = AB2.ID_Base AND AB2.Tipo_Auxiliar = 'secundario' AND AB2.Estado_Auxiliar = 'activo'
    LEFT JOIN empleado E2 ON AB2.empcodigo = E2.empcodigo

    WHERE B.ID_Base = @ID_Base;
END
GO
/****** Object:  StoredProcedure [dbo].[GetBaseEstadisticas]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- üîπ Estad√≠sticas agregadas
CREATE   PROCEDURE [dbo].[GetBaseEstadisticas]
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        COUNT(*) AS Total_Bases,
        COUNT(DISTINCT Tipo_Base) AS Tipos_Distintos,
        COUNT(DISTINCT BS.ID_Servidor) AS Servidores_Asignados,
        COUNT(DISTINCT AB.empcodigo) AS Auxiliares_Asignados
    FROM BaseDatos B
    LEFT JOIN Base_Servidores BS ON B.ID_Base = BS.ID_Base AND BS.Estado_Asignacion = 'activo'
    LEFT JOIN Auxiliar_Base AB ON B.ID_Base = AB.ID_Base AND AB.Estado_Auxiliar = 'activo';
END
GO
/****** Object:  StoredProcedure [dbo].[GetIPDetalle]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetIPDetalle]
    @ID_IP INT
AS
BEGIN
    SELECT 
        IP.ID_IP,
        IP.Direccion_IP,
        IP.Estado_Ip,
        IP.Gateway,
        IP.Mascara_Subred,
        IP.Rango,
        IP.DNS1,
        IP.DNS2,
        IP.VLAND,
        IP.Descripcion,
        IP.ID_Responsable,
        CONCAT(E.empnombres, ' ', E.empapellidopaterno, ' ', ISNULL(E.empapellidomaterno, '')) AS Responsable,
        SI.Host_Name,
        SI.Fecha_Creacion,
        S.Nombre_Servidor,
        S.fech_despliegue AS Fecha_Despliegue_Servidor
    FROM IP
    LEFT JOIN empleado E ON IP.ID_Responsable = E.empcodigo
    LEFT JOIN Servidor_IP SI ON IP.ID_IP = SI.ID_IP
    LEFT JOIN Servidores S ON SI.ID_Servidor = S.ID_Servidor
    WHERE IP.ID_IP = @ID_IP
END
GO
/****** Object:  StoredProcedure [dbo].[GetTotalIPs]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** 9. Total IPs ******/
CREATE   PROCEDURE [dbo].[GetTotalIPs]
AS
BEGIN
    SELECT COUNT(*) AS Total_IPs
    FROM IP
    WHERE Estado_Ip = 1
END
GO
/****** Object:  StoredProcedure [dbo].[GetTotalIPsInactivas]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/****** 12. Total IPs inactivas ******/
CREATE   PROCEDURE [dbo].[GetTotalIPsInactivas]
AS
BEGIN
    SELECT COUNT(*) AS Total_Inactivas
    FROM IP
    WHERE Estado_Ip = 0
END
GO
/****** Object:  StoredProcedure [dbo].[insert_aplicativo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[insert_aplicativo]
    @cricodigo INT,
    @tipccodigo INT,
    @maccodigo INT,
    @hercodigo INT,
    @tipaccesocodigo INT,
    @tipcodigo INT,
    @tfdcodigo INT,
    @estcodigo INT,
    @intcodigo INT,
    @fuecodigo INT,
    @descodigo INT,
    @concodigo INT,
    @aplnombrecorto VARCHAR(50),
    @aplnombrecompleto VARCHAR(250),
    @aplregistro VARCHAR(50),
    @aplfechaadquisicion DATETIME,
    @aplfechaimplementacion DATETIME,
    @aplproveedor VARCHAR(100),
    @aplversion VARCHAR(100),
    @aplanocreacion INT,
    @aplnumerousuario INT,
    @apladministradorusuario VARCHAR(200),
    @aplvalorestimado VARCHAR(100),
    @apltransaccionesmensuales VARCHAR(50),
    @aplfechaactualizacion DATETIME,
    @aplsla VARCHAR(100),
    @aplrutadoctecnico VARCHAR(1000),
    @aplenlace VARCHAR(1200),
    @apltiemporeinicio VARCHAR(200),
    @aplhorareinicio VARCHAR(200),
    @aplactivo INT,
    @apldescripcion VARCHAR(750),
    @aplobservaciones VARCHAR(800),
    @aplhsoportevigente VARCHAR(20),
    @aplhttps INT,
    @aplarearequirente VARCHAR(300),
    @aplsubarea VARCHAR(300),
    @aplproceso VARCHAR(200)
AS
BEGIN
    SET NOCOUNT ON;

    -- üîç Validaci√≥n de claves for√°neas
    IF NOT EXISTS (SELECT 1 FROM criticidad WHERE cricodigo = @cricodigo)
        THROW 50001, 'C√≥digo de criticidad inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM tipo_catastro WHERE tipccodigo = @tipccodigo)
        THROW 50002, 'C√≥digo de tipo catastro inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM herramienta WHERE hercodigo = @hercodigo)
        THROW 50003, 'C√≥digo de herramienta inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM tipo_acceso WHERE tipaccesocodigo = @tipaccesocodigo)
        THROW 50004, 'C√≥digo de tipo acceso inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM tipo_usuario WHERE tipcodigo = @tipcodigo)
        THROW 50005, 'C√≥digo de tipo usuario inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM tipo_fuentedatos WHERE tfdcodigo = @tfdcodigo)
        THROW 50006, 'C√≥digo de fuente de datos inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM estado WHERE estcodigo = @estcodigo)
        THROW 50007, 'C√≥digo de estado inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM tipo_integracion WHERE intcodigo = @intcodigo)
        THROW 50008, 'C√≥digo de integraci√≥n inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM fuente WHERE fuecodigo = @fuecodigo)
        THROW 50009, 'C√≥digo de fuente inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM desarrollo WHERE descodigo = @descodigo)
        THROW 50010, 'C√≥digo de desarrollo inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM control WHERE concodigo = @concodigo)
        THROW 50011, 'C√≥digo de control inv√°lido.', 1;

    -- üßæ Inserci√≥n principal
    INSERT INTO aplicativo (
        cricodigo, tipccodigo, maccodigo, hercodigo, tipaccesocodigo,
        tipcodigo, tfdcodigo, estcodigo, intcodigo, fuecodigo,
        descodigo, concodigo, aplnombrecorto, aplnombrecompleto,
        aplregistro, aplfechaadquisicion, aplfechaimplementacion,
        aplproveedor, aplversion, aplanocreacion, aplnumerousuario,
        apladministradorusuario, aplvalorestimado, apltransaccionesmensuales,
        aplfechaactualizacion, aplsla, aplrutadoctecnico, aplenlace,
        apltiemporeinicio, aplhorareinicio, aplactivo, apldescripcion,
        aplobservaciones, aplhsoportevigente, aplhttps, aplarearequirente,
        aplsubarea, aplproceso
    )
    VALUES (
        @cricodigo, @tipccodigo, @maccodigo, @hercodigo, @tipaccesocodigo,
        @tipcodigo, @tfdcodigo, @estcodigo, @intcodigo, @fuecodigo,
        @descodigo, @concodigo, @aplnombrecorto, @aplnombrecompleto,
        @aplregistro, @aplfechaadquisicion, @aplfechaimplementacion,
        @aplproveedor, @aplversion, @aplanocreacion, @aplnumerousuario,
        @apladministradorusuario, @aplvalorestimado, @apltransaccionesmensuales,
        @aplfechaactualizacion, @aplsla, @aplrutadoctecnico, @aplenlace,
        @apltiemporeinicio, @aplhorareinicio, @aplactivo, @apldescripcion,
        @aplobservaciones, @aplhsoportevigente, @aplhttps, @aplarearequirente,
        @aplsubarea, @aplproceso
    );
END
GO
/****** Object:  StoredProcedure [dbo].[insert_employee]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- üÜï Insertar responsable sin campos de login
CREATE PROCEDURE [dbo].[insert_employee]
    @empnombres VARCHAR(100),
    @empapellidopaterno VARCHAR(100),
    @empapellidomaterno VARCHAR(100),
    @empcedula VARCHAR(40),
    @empemail VARCHAR(100),
    @empcelular VARCHAR(20),
    @emptiposangre VARCHAR(5),
    @empsexo CHAR(1),
    @empfechainicio DATE,
    @empactivo INT,
    @empdescripcion VARCHAR(500),
    @empobservaciones VARCHAR(500),
    @arecodigo INT,
    @rolcodigo INT,
    @percodigo INT
AS
BEGIN
    INSERT INTO empleado (
        empnombres, empapellidopaterno, empapellidomaterno, empcedula,
        empemail, empcelular, emptiposangre, empsexo,
        empfechainicio, empfechacreacion,
        empactivo, empdescripcion, empobservaciones
    )
    VALUES (
        @empnombres, @empapellidopaterno, @empapellidomaterno, @empcedula,
        @empemail, @empcelular, @emptiposangre, @empsexo,
        @empfechainicio, GETDATE(),
        @empactivo, @empdescripcion, @empobservaciones
    );

    DECLARE @newId INT = SCOPE_IDENTITY();

    INSERT INTO areaempleado (empcodigo, arecodigo) VALUES (@newId, @arecodigo);
    INSERT INTO rolempleado (empcodigo, rolcodigo) VALUES (@newId, @rolcodigo);
    INSERT INTO perfilempleado (empcodigo, percodigo) VALUES (@newId, @percodigo);

    SELECT 'insertado' AS status, @newId AS empcodigo;
END
GO
/****** Object:  StoredProcedure [dbo].[insert_servidor]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[insert_servidor]
    @Nombre_Servidor VARCHAR(100),
    @Monitoreo_PRTG VARCHAR(250),
    @Disponibilidad VARCHAR(250),
    @Observacion VARCHAR(200),
    @Registro_PRTG VARCHAR(100),
    @Tipo_Equipo VARCHAR(100),
    @OS VARCHAR(200),
    @Espacio_Disco_GB VARCHAR(100),
    @Criticidad_Organizacion_1 INT,
    @Criticidad_Organizacion_2 INT,
    @Tipo_servicio VARCHAR(100),
    @Ambiente_Ejecucion VARCHAR(100),
    @Dia_Ejecucion_Serv VARCHAR(250),
    @Hora_Serv VARCHAR(250),
    @interfaz_red VARCHAR(255),
    @velocidad VARCHAR(50),
    @hipervisor VARCHAR(100),
    @numero_discos INT,
    @uso_disco VARCHAR(255),
    @memoria_ram VARCHAR(255),
    @procesador VARCHAR(255),
    @tipo_disco VARCHAR(10),
    @fech_despliegue VARCHAR(MAX),
    @nucleos INT,
    @ID_Zona INT,
    @estcodigo INT,
    @Usuario NVARCHAR(100) = NULL,
    @Motivo NVARCHAR(500) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    -- üîç Validaci√≥n de claves for√°neas
    IF NOT EXISTS (SELECT 1 FROM estado WHERE estcodigo = @estcodigo)
        THROW 56001, 'C√≥digo de estado inv√°lido.', 1;

    IF NOT EXISTS (SELECT 1 FROM ZONA_A WHERE ID_Zona = @ID_Zona)
        THROW 56002, 'C√≥digo de zona inv√°lido.', 1;

    -- üîç Validaci√≥n de unicidad
    IF EXISTS (SELECT 1 FROM Servidores WHERE Nombre_Servidor = @Nombre_Servidor)
        THROW 56003, 'Ya existe un servidor con ese nombre.', 1;

    -- üîç Validaci√≥n de criticidad
    IF @Criticidad_Organizacion_1 NOT BETWEEN 1 AND 5
        THROW 56004, 'Criticidad_Organizacion_1 fuera de rango (1‚Äì5).', 1;

    IF @Criticidad_Organizacion_2 NOT BETWEEN 1 AND 5
        THROW 56005, 'Criticidad_Organizacion_2 fuera de rango (1‚Äì5).', 1;

    -- ‚úÖ Inserci√≥n principal
    INSERT INTO dbo.Servidores (
        Nombre_Servidor, Monitoreo_PRTG, Disponibilidad, Observacion, Registro_PRTG,
        Tipo_Equipo, OS, Espacio_Disco_GB, Criticidad_Organizacion_1, Criticidad_Organizacion_2,
        Tipo_servicio, Ambiente_Ejecucion, Dia_Ejecucion_Serv, Hora_Serv,
        interfaz_red, velocidad, hipervisor, numero_discos, uso_disco,
        memoria_ram, procesador, tipo_disco, fech_despliegue, nucleos,
        ID_Zona, estcodigo
    )
    VALUES (
        @Nombre_Servidor, @Monitoreo_PRTG, @Disponibilidad, @Observacion, @Registro_PRTG,
        @Tipo_Equipo, @OS, @Espacio_Disco_GB, @Criticidad_Organizacion_1, @Criticidad_Organizacion_2,
        @Tipo_servicio, @Ambiente_Ejecucion, @Dia_Ejecucion_Serv, @Hora_Serv,
        @interfaz_red, @velocidad, @hipervisor, @numero_discos, @uso_disco,
        @memoria_ram, @procesador, @tipo_disco, @fech_despliegue, @nucleos,
        @ID_Zona, @estcodigo
    );

    -- üìù Auditor√≠a opcional (si tienes tabla de auditor√≠a)
    DECLARE @ID_Servidor INT = SCOPE_IDENTITY();

    IF @Usuario IS NOT NULL
    BEGIN
        INSERT INTO dbo.Auditoria_Servidores (ID_Servidor, Fecha_Creacion, Usuario, Motivo, Accion)
        VALUES (@ID_Servidor, GETDATE(), @Usuario, @Motivo, 'INSERT');
    END
END
GO
/****** Object:  StoredProcedure [dbo].[insertActivo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[insertActivo]
    @Naturaleza NVARCHAR(50),
    @Activo NVARCHAR(50),
    @Gestion_TIC NVARCHAR(50),
    @Descripcion_Activo NVARCHAR(MAX),
    @Etiqueta_Activo_Fijo NVARCHAR(150),
    @Codigo_activo_Fijo_EBS NVARCHAR(50),
    @Centro_Costo NVARCHAR(50),
    @Fabricante NVARCHAR(100),
    @Modelo NVARCHAR(150),
    @Serie NVARCHAR(100),
    @Num_Contrato NVARCHAR(150),
    @Fecha_Recepcion DATETIME,
    @Caducidad_Garantia DATETIME,
    @ID_Zona INT,
    @Precio_Compra DECIMAL(18,2),
    @Ubicacion_Desc NVARCHAR(MAX),
    @Estado NVARCHAR(50)
AS
BEGIN
    INSERT INTO dbo.Activo_Fisico (
        Naturaleza, Activo, Gestion_TIC, Descripcion_Activo, Etiqueta_Activo_Fijo,
        Codigo_activo_Fijo_EBS, Centro_Costo, Fabricante, Modelo, Serie, Num_Contrato,
        Fecha_Recepcion, Caducidad_Garantia, ID_Zona, Precio_Compra, Ubicacion_Desc, Estado
    )
    VALUES (
        @Naturaleza, @Activo, @Gestion_TIC, @Descripcion_Activo, @Etiqueta_Activo_Fijo,
        @Codigo_activo_Fijo_EBS, @Centro_Costo, @Fabricante, @Modelo, @Serie, @Num_Contrato,
        @Fecha_Recepcion, @Caducidad_Garantia, @ID_Zona, @Precio_Compra, @Ubicacion_Desc, @Estado
    );
END;
GO
/****** Object:  StoredProcedure [dbo].[InsertBaseDatos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[InsertBaseDatos]
    @Nombre_Base VARCHAR(100),
    @Nombre_Instancia VARCHAR(100),
    @Tipo_Base VARCHAR(50),
    @Descripcion VARCHAR(300),
    @empcodigo INT = NULL -- auxiliar principal opcional
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ID_Base INT;

    -- Insertar la base
    INSERT INTO BaseDatos (
        Nombre_Base,
        Nombre_Instancia,
        Tipo_Base,
        Descripcion
    )
    VALUES (
        @Nombre_Base,
        @Nombre_Instancia,
        @Tipo_Base,
        @Descripcion
    );

    SET @ID_Base = SCOPE_IDENTITY();

    -- Si se proporciona auxiliar, registrar en tabla intermedia
    IF @empcodigo IS NOT NULL
    BEGIN
        INSERT INTO Auxiliar_Base (ID_Base, empcodigo, Tipo_Auxiliar, Estado_Auxiliar)
        VALUES (@ID_Base, @empcodigo, 'principal', 'activo');
    END

    -- Devolver ID y estado
    SELECT @ID_Base AS ID_Base, 'insertado' AS status;
END
GO
/****** Object:  StoredProcedure [dbo].[insertEmpleadoActivo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Creado por Marlyn Almeida - 07/08/2025
CREATE PROCEDURE [dbo].[insertEmpleadoActivo]
  @ID_Activo_Fisico INT,
  @EmpCodigo INT
AS
BEGIN
  INSERT INTO Empleado_Activo (
    ID_Activo_Fisico,
    EmpCodigo,
    Fecha_Asignacion
  )
  VALUES (
    @ID_Activo_Fisico,
    @EmpCodigo,
    GETDATE()
  );
END;
GO
/****** Object:  StoredProcedure [dbo].[InsertIP]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[InsertIP]
    @Direccion_IP VARCHAR(250),
    @Estado_Ip BIT,
    @Gateway VARCHAR(250),
    @Mascara_Subred VARCHAR(100),
    @Rango VARCHAR(250),
    @DNS1 VARCHAR(250),
    @DNS2 VARCHAR(250),
    @VLAND VARCHAR(100),
    @Descripcion VARCHAR(500),
    @ID_Responsable INT
AS
BEGIN
    INSERT INTO IP (
        Direccion_IP,
        Estado_Ip,
        Gateway,
        Mascara_Subred,
        Rango,
        DNS1,
        DNS2,
        VLAND,
        Descripcion,
        ID_Responsable
    )
    VALUES (
        @Direccion_IP,
        @Estado_Ip,
        @Gateway,
        @Mascara_Subred,
        @Rango,
        @DNS1,
        @DNS2,
        @VLAND,
        @Descripcion,
        @ID_Responsable
    )
END
GO
/****** Object:  StoredProcedure [dbo].[is_activo_libre]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[is_activo_libre]
    @ID_Activo_Fisico INT
AS
BEGIN
    SELECT COUNT(*) AS AsignacionesActivas
    FROM Empleado_Activo
    WHERE ID_Activo_Fisico = @ID_Activo_Fisico AND Fecha_Desasignacion IS NULL;
END;
GO
/****** Object:  StoredProcedure [dbo].[remove_asignacion]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[remove_asignacion]
    @ID_Activo_Fisico INT
AS
BEGIN
    UPDATE Empleado_Activo
    SET Fecha_Desasignacion = GETDATE()
    WHERE ID_Activo_Fisico = @ID_Activo_Fisico AND Fecha_Desasignacion IS NULL;
END;
GO
/****** Object:  StoredProcedure [dbo].[sp_login_empleado]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[sp_login_empleado]
    @empusuario VARCHAR(100),
    @empcontrasena VARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    -- üîë Buscar usuario activo
    DECLARE @hashed_password VARCHAR(64);
    SET @hashed_password = CONVERT(VARCHAR(64), HASHBYTES('SHA2_256', @empcontrasena), 2);

    DECLARE @usuario_count INT;
    DECLARE @credenciales_count INT;

    -- Verificar si el usuario existe y est√° activo
    SELECT @usuario_count = COUNT(*)
    FROM empleado
    WHERE empusuario = @empusuario AND empactivo = 1;

    IF @usuario_count = 0
    BEGIN
        -- Usuario no existe o est√° inactivo
        SELECT 'error' AS status, 'El usuario no existe o est√° inactivo.' AS message;
        RETURN;
    END

    -- Verificar credenciales
    SELECT @credenciales_count = COUNT(*)
    FROM empleado
    WHERE empusuario = @empusuario AND empcontrasena = @hashed_password AND empactivo = 1;

    IF @credenciales_count = 0
    BEGIN
        -- Contrase√±a incorrecta
        SELECT 'error' AS status, 'Credenciales incorrectas.' AS message;
        RETURN;
    END

    -- ‚úÖ Login exitoso: retornar datos m√≠nimos
    SELECT empcodigo, empusuario
    FROM empleado
    WHERE empusuario = @empusuario AND empactivo = 1;
END
GO
/****** Object:  StoredProcedure [dbo].[update_aplicativo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[update_aplicativo]
    @aplcodigo INT,
    @cricodigo INT,
    @tipccodigo INT,
    @maccodigo INT,
    @hercodigo INT,
    @tipaccesocodigo INT,
    @tipcodigo INT,
    @tfdcodigo INT,
    @estcodigo INT,
    @intcodigo INT,
    @fuecodigo INT,
    @descodigo INT,
    @concodigo INT,
    @aplnombrecorto VARCHAR(50),
    @aplnombrecompleto VARCHAR(250),
    @aplregistro VARCHAR(50),
    @aplfechaadquisicion DATETIME,
    @aplfechaimplementacion DATETIME,
    @aplproveedor VARCHAR(100),
    @aplversion VARCHAR(100),
    @aplanocreacion INT,
    @aplnumerousuario INT,
    @apladministradorusuario VARCHAR(200),
    @aplvalorestimado VARCHAR(100),
    @apltransaccionesmensuales VARCHAR(50),
    @aplfechaactualizacion DATETIME,
    @aplsla VARCHAR(100),
    @aplrutadoctecnico VARCHAR(1000),
    @aplenlace VARCHAR(1200),
    @apltiemporeinicio VARCHAR(200),
    @aplhorareinicio VARCHAR(200),
    @aplactivo INT,
    @apldescripcion VARCHAR(750),
    @aplobservaciones VARCHAR(800),
    @aplhsoportevigente VARCHAR(20),
    @aplhttps INT,
    @aplarearequirente VARCHAR(300),
    @aplsubarea VARCHAR(300),
    @aplproceso VARCHAR(200)
AS
BEGIN
    SET NOCOUNT ON;

    -- üîç Validaci√≥n de existencia
    IF NOT EXISTS (SELECT 1 FROM aplicativo WHERE aplcodigo = @aplcodigo)
        THROW 50100, 'El aplicativo especificado no existe.', 1;

    -- üîê Validaci√≥n de claves for√°neas
    IF NOT EXISTS (SELECT 1 FROM criticidad WHERE cricodigo = @cricodigo)
        THROW 50101, 'C√≥digo de criticidad inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM tipo_catastro WHERE tipccodigo = @tipccodigo)
        THROW 50102, 'C√≥digo de tipo catastro inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM herramienta WHERE hercodigo = @hercodigo)
        THROW 50103, 'C√≥digo de herramienta inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM tipo_acceso WHERE tipaccesocodigo = @tipaccesocodigo)
        THROW 50104, 'C√≥digo de tipo acceso inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM tipo_usuario WHERE tipcodigo = @tipcodigo)
        THROW 50105, 'C√≥digo de tipo usuario inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM tipo_fuentedatos WHERE tfdcodigo = @tfdcodigo)
        THROW 50106, 'C√≥digo de fuente de datos inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM estado WHERE estcodigo = @estcodigo)
        THROW 50107, 'C√≥digo de estado inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM tipo_integracion WHERE intcodigo = @intcodigo)
        THROW 50108, 'C√≥digo de integraci√≥n inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM fuente WHERE fuecodigo = @fuecodigo)
        THROW 50109, 'C√≥digo de fuente inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM desarrollo WHERE descodigo = @descodigo)
        THROW 50110, 'C√≥digo de desarrollo inv√°lido.', 1;
    IF NOT EXISTS (SELECT 1 FROM control WHERE concodigo = @concodigo)
        THROW 50111, 'C√≥digo de control inv√°lido.', 1;

    -- üîÑ Actualizaci√≥n completa
    UPDATE aplicativo
    SET
        cricodigo = @cricodigo,
        tipccodigo = @tipccodigo,
        maccodigo = @maccodigo,
        hercodigo = @hercodigo,
        tipaccesocodigo = @tipaccesocodigo,
        tipcodigo = @tipcodigo,
        tfdcodigo = @tfdcodigo,
        estcodigo = @estcodigo,
        intcodigo = @intcodigo,
        fuecodigo = @fuecodigo,
        descodigo = @descodigo,
        concodigo = @concodigo,
        aplnombrecorto = @aplnombrecorto,
        aplnombrecompleto = @aplnombrecompleto,
        aplregistro = @aplregistro,
        aplfechaadquisicion = @aplfechaadquisicion,
        aplfechaimplementacion = @aplfechaimplementacion,
        aplproveedor = @aplproveedor,
        aplversion = @aplversion,
        aplanocreacion = @aplanocreacion,
        aplnumerousuario = @aplnumerousuario,
        apladministradorusuario = @apladministradorusuario,
        aplvalorestimado = @aplvalorestimado,
        apltransaccionesmensuales = @apltransaccionesmensuales,
        aplfechaactualizacion = @aplfechaactualizacion,
        aplsla = @aplsla,
        aplrutadoctecnico = @aplrutadoctecnico,
        aplenlace = @aplenlace,
        apltiemporeinicio = @apltiemporeinicio,
        aplhorareinicio = @aplhorareinicio,
        aplactivo = @aplactivo,
        apldescripcion = @apldescripcion,
        aplobservaciones = @aplobservaciones,
        aplhsoportevigente = @aplhsoportevigente,
        aplhttps = @aplhttps,
        aplarearequirente = @aplarearequirente,
        aplsubarea = @aplsubarea,
        aplproceso = @aplproceso
    WHERE aplcodigo = @aplcodigo;
END
GO
/****** Object:  StoredProcedure [dbo].[update_employee]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ‚úèÔ∏è Actualizar responsable sin campos de login
CREATE PROCEDURE [dbo].[update_employee]
    @empcodigo INT,
    @empnombres VARCHAR(100),
    @empapellidopaterno VARCHAR(100),
    @empapellidomaterno VARCHAR(100),
    @empcedula VARCHAR(40),
    @empemail VARCHAR(100),
    @empcelular VARCHAR(20),
    @emptiposangre VARCHAR(5),
    @empsexo CHAR(1),
    @empfechainicio DATE,
    @empactivo INT,
    @empdescripcion VARCHAR(500),
    @empobservaciones VARCHAR(500),
    @arecodigo INT,
    @rolcodigo INT,
    @percodigo INT
AS
BEGIN
    UPDATE empleado
    SET
        empnombres = @empnombres,
        empapellidopaterno = @empapellidopaterno,
        empapellidomaterno = @empapellidomaterno,
        empcedula = @empcedula,
        empemail = @empemail,
        empcelular = @empcelular,
        emptiposangre = @emptiposangre,
        empsexo = @empsexo,
        empfechainicio = @empfechainicio,
        empactivo = @empactivo,
        empdescripcion = @empdescripcion,
        empobservaciones = @empobservaciones
    WHERE empcodigo = @empcodigo;

    DELETE FROM areaempleado WHERE empcodigo = @empcodigo;
    INSERT INTO areaempleado (empcodigo, arecodigo) VALUES (@empcodigo, @arecodigo);

    DELETE FROM rolempleado WHERE empcodigo = @empcodigo;
    INSERT INTO rolempleado (empcodigo, rolcodigo) VALUES (@empcodigo, @rolcodigo);

    DELETE FROM perfilempleado WHERE empcodigo = @empcodigo;
    INSERT INTO perfilempleado (empcodigo, percodigo) VALUES (@empcodigo, @percodigo);

    SELECT 'actualizado' AS status;
END
GO
/****** Object:  StoredProcedure [dbo].[update_servidor]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   PROCEDURE [dbo].[update_servidor]
    @ID_Servidor INT,
    @Nombre_Servidor VARCHAR(100),
    @Monitoreo_PRTG VARCHAR(250),
    @Disponibilidad VARCHAR(250),
    @Observacion VARCHAR(200),
    @Registro_PRTG VARCHAR(100),
    @Tipo_Equipo VARCHAR(100),
    @OS VARCHAR(200),
    @Espacio_Disco_GB VARCHAR(100),
    @Criticidad_Organizacion_1 INT,
    @Criticidad_Organizacion_2 INT,
    @Tipo_servicio VARCHAR(100),
    @Ambiente_Ejecucion VARCHAR(100),
    @Dia_Ejecucion_Serv VARCHAR(250),
    @Hora_Serv VARCHAR(250),
    @interfaz_red VARCHAR(255),
    @velocidad VARCHAR(50),
    @hipervisor VARCHAR(100),
    @numero_discos INT,
    @uso_disco VARCHAR(255),
    @memoria_ram VARCHAR(255),
    @procesador VARCHAR(255),
    @tipo_disco VARCHAR(10),
    @fech_despliegue VARCHAR(MAX),
    @nucleos INT,
    @ID_Zona INT,
    @estcodigo INT
AS
BEGIN
    SET NOCOUNT ON;

    -- üîç Validaci√≥n de existencia
    IF NOT EXISTS (SELECT 1 FROM dbo.Servidores WHERE ID_Servidor = @ID_Servidor)
        THROW 56010, 'Servidor no encontrado.', 1;

    -- üîç Validaci√≥n de claves for√°neas
    IF NOT EXISTS (SELECT 1 FROM dbo.estado WHERE estcodigo = @estcodigo)
        THROW 56011, 'C√≥digo de estado inv√°lido.', 1;

    IF NOT EXISTS (SELECT 1 FROM dbo.ZONA_A WHERE ID_Zona = @ID_Zona)
        THROW 56012, 'C√≥digo de zona inv√°lido.', 1;

    -- ‚úèÔ∏è Actualizaci√≥n completa
    UPDATE dbo.Servidores
    SET
        Nombre_Servidor = @Nombre_Servidor,
        Monitoreo_PRTG = @Monitoreo_PRTG,
        Disponibilidad = @Disponibilidad,
        Observacion = @Observacion,
        Registro_PRTG = @Registro_PRTG,
        Tipo_Equipo = @Tipo_Equipo,
        OS = @OS,
        Espacio_Disco_GB = @Espacio_Disco_GB,
        Criticidad_Organizacion_1 = @Criticidad_Organizacion_1,
        Criticidad_Organizacion_2 = @Criticidad_Organizacion_2,
        Tipo_servicio = @Tipo_servicio,
        Ambiente_Ejecucion = @Ambiente_Ejecucion,
        Dia_Ejecucion_Serv = @Dia_Ejecucion_Serv,
        Hora_Serv = @Hora_Serv,
        interfaz_red = @interfaz_red,
        velocidad = @velocidad,
        hipervisor = @hipervisor,
        numero_discos = @numero_discos,
        uso_disco = @uso_disco,
        memoria_ram = @memoria_ram,
        procesador = @procesador,
        tipo_disco = @tipo_disco,
        fech_despliegue = @fech_despliegue,
        nucleos = @nucleos,
        ID_Zona = @ID_Zona,
        estcodigo = @estcodigo
    WHERE ID_Servidor = @ID_Servidor;
END
GO
/****** Object:  StoredProcedure [dbo].[updateActivo]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[updateActivo]
    @id_activo_fisico INT,
    @Naturaleza NVARCHAR(50),
    @Activo NVARCHAR(50),
    @Gestion_TIC NVARCHAR(50),
    @Descripcion_Activo NVARCHAR(MAX),
    @Etiqueta_Activo_Fijo NVARCHAR(150),
    @Codigo_activo_Fijo_EBS NVARCHAR(50),
    @Centro_Costo NVARCHAR(50),
    @Fabricante NVARCHAR(100),
    @Modelo NVARCHAR(150),
    @Serie NVARCHAR(100),
    @Num_Contrato NVARCHAR(150),
    @Fecha_Recepcion DATETIME,
    @Caducidad_Garantia DATETIME,
    @ID_Zona INT,
    @Precio_Compra DECIMAL(18,2),
    @Ubicacion_Desc NVARCHAR(MAX),
    @Estado NVARCHAR(50)
AS
BEGIN
    UPDATE dbo.Activo_Fisico
    SET Naturaleza = @Naturaleza,
        Activo = @Activo,
        Gestion_TIC = @Gestion_TIC,
        Descripcion_Activo = @Descripcion_Activo,
        Etiqueta_Activo_Fijo = @Etiqueta_Activo_Fijo,
        Codigo_activo_Fijo_EBS = @Codigo_activo_Fijo_EBS,
        Centro_Costo = @Centro_Costo,
        Fabricante = @Fabricante,
        Modelo = @Modelo,
        Serie = @Serie,
        Num_Contrato = @Num_Contrato,
        Fecha_Recepcion = @Fecha_Recepcion,
        Caducidad_Garantia = @Caducidad_Garantia,
        ID_Zona = @ID_Zona,
        Precio_Compra = @Precio_Compra,
        Ubicacion_Desc = @Ubicacion_Desc,
        Estado = @Estado
    WHERE id_activo_fisico = @id_activo_fisico;
END;
GO
/****** Object:  StoredProcedure [dbo].[UpdateBaseDatos]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- üîπ Actualizar base existente
CREATE   PROCEDURE [dbo].[UpdateBaseDatos]
    @ID_Base INT,
    @Nombre_Base VARCHAR(100),
    @Nombre_Instancia VARCHAR(100),
    @Tipo_Base VARCHAR(50),
    @Descripcion VARCHAR(300)
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE BaseDatos
    SET Nombre_Base = @Nombre_Base,
        Nombre_Instancia = @Nombre_Instancia,
        Tipo_Base = @Tipo_Base,
        Descripcion = @Descripcion
    WHERE ID_Base = @ID_Base;
END
GO
/****** Object:  StoredProcedure [dbo].[UpdateIP]    Script Date: 11/9/2025 14:25:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateIP]
    @ID_IP INT,
    @Direccion_IP VARCHAR(250),
    @Estado_Ip BIT,
    @Gateway VARCHAR(250),
    @Mascara_Subred VARCHAR(100),
    @Rango VARCHAR(250),
    @DNS1 VARCHAR(250),
    @DNS2 VARCHAR(250),
    @VLAND VARCHAR(100),
    @Descripcion VARCHAR(500),
    @ID_Responsable INT
AS
BEGIN
    UPDATE IP
    SET Direccion_IP = @Direccion_IP,
        Estado_Ip = @Estado_Ip,
        Gateway = @Gateway,
        Mascara_Subred = @Mascara_Subred,
        Rango = @Rango,
        DNS1 = @DNS1,
        DNS2 = @DNS2,
        VLAND = @VLAND,
        Descripcion = @Descripcion,
        ID_Responsable = @ID_Responsable
    WHERE ID_IP = @ID_IP
END


GO
