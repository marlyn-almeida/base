// Consolidado por Marlyn Almeida el 18/08/2025
// Incluye tipos, mapeos y funciones API para activos f√≠sicos

const API_URL = "http://localhost/aplicativo/backend/Cruds/activoFisico.php";

// üß© Tipos
export type Estado = "Operativo" | "Inoperativo" | "En mantenimiento";

export type ActivoFisico = {
  id: string;
  naturaleza: string;
  nombre: string;
  administrador: string;
  descripcion: string;
  etiqueta: string;
  codigoActivo: string;
  centroCosto: string;
  fabricante: string;
  modelo: string;
  numeroSerie: string;
  numeroContrato: string;
  fechaAdquisicion: string;
  fechaVencimientoGarantia: string;
  zonaId: number;
  precioCompra: number;
  ubicacion: string;
  estado: Estado;
};

export type ActivoFisicoForm = Omit<ActivoFisico, "id">;

type BackendResponse = {
  status: string;
  mensaje?: string;
  id_activo_fisico?: number;
};

// üìÖ Fecha actual
const getToday = (): string => new Date().toISOString().split("T")[0];

// üîÅ Mapeo individual
export function mapToActivoFisico(raw: any): ActivoFisico {
  return {
    id: `act-${raw.id_activo_fisico}`,
    naturaleza: raw.Naturaleza ?? "",
    nombre: raw.Activo ?? "",
    administrador: raw.Gestion_TIC ?? "",
    descripcion: raw.Descripcion_Activo ?? "",
    etiqueta: raw.Etiqueta_Activo_Fijo ?? "",
    codigoActivo: raw.Codigo_activo_Fijo_EBS ?? "",
    centroCosto: raw.Centro_Costo ?? "",
    fabricante: raw.Fabricante ?? "",
    modelo: raw.Modelo ?? "",
    numeroSerie: raw.Serie ?? "",
    numeroContrato: raw.Num_Contrato ?? "",
    fechaAdquisicion: raw.Fecha_Recepcion?.split("T")[0] ?? getToday(),
    fechaVencimientoGarantia: raw.Caducidad_Garantia?.split("T")[0] ?? "",
    zonaId: raw.ID_Zona ?? 0,
    precioCompra: raw.Precio_Compra ?? 0,
    ubicacion: raw.Ubicacion_Desc ?? "",
    estado: raw.Estado ?? "Operativo",
  };
}

// üîÅ Agrupaci√≥n
export function groupActivosFisicos(rows: any[]): ActivoFisico[] {
  const activosMap = new Map<string, ActivoFisico>();
  for (const row of rows) {
    const id = `act-${row.id_activo_fisico}`;
    if (!activosMap.has(id)) {
      activosMap.set(id, mapToActivoFisico(row));
    }
  }
  return Array.from(activosMap.values());
}

// üì• Obtener activos f√≠sicos
export const obtenerActivosFisicos = async (): Promise<ActivoFisico[]> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ accion: "read" }),
    });

    const text = await res.text();
    if (text.trim().startsWith("<")) throw new Error("Respuesta HTML inesperada");

    const data = JSON.parse(text);
    if (!Array.isArray(data)) throw new Error("Formato inesperado");

    return data.map(mapToActivoFisico);
  } catch (error) {
    console.error("Error al obtener activos f√≠sicos:", error);
    return [];
  }
};

// üì§ Crear activo f√≠sico
export const crearActivoFisico = async (a: ActivoFisicoForm): Promise<number | null> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        accion: "create",
        Naturaleza: a.naturaleza,
        Activo: a.nombre,
        Gestion_TIC: a.administrador,
        Descripcion_Activo: a.descripcion,
        Etiqueta_Activo_Fijo: a.etiqueta,
        Codigo_activo_Fijo_EBS: a.codigoActivo,
        Centro_Costo: a.centroCosto,
        Fabricante: a.fabricante,
        Modelo: a.modelo,
        Serie: a.numeroSerie,
        Num_Contrato: a.numeroContrato,
        Fecha_Recepcion: a.fechaAdquisicion,
        Caducidad_Garantia: a.fechaVencimientoGarantia,
        ID_Zona: a.zonaId,
        Precio_Compra: a.precioCompra,
        Ubicacion_Desc: a.ubicacion,
        Estado: a.estado,
      }),
    });

    const text = await res.text();
    const result: BackendResponse = JSON.parse(text);
    return result.status === "insertado" ? result.id_activo_fisico ?? null : null;
  } catch (error) {
    console.error("Error al crear activo f√≠sico:", error);
    return null;
  }
};

// ‚úèÔ∏è Editar activo f√≠sico
export const editarActivoFisico = async (a: ActivoFisico): Promise<boolean> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        accion: "update",
        id_activo_fisico: parseInt(a.id.replace("act-", "")),
        Naturaleza: a.naturaleza,
        Activo: a.nombre,
        Gestion_TIC: a.administrador,
        Descripcion_Activo: a.descripcion,
        Etiqueta_Activo_Fijo: a.etiqueta,
        Codigo_activo_Fijo_EBS: a.codigoActivo,
        Centro_Costo: a.centroCosto,
        Fabricante: a.fabricante,
        Modelo: a.modelo,
        Serie: a.numeroSerie,
        Num_Contrato: a.numeroContrato,
        Fecha_Recepcion: a.fechaAdquisicion,
        Caducidad_Garantia: a.fechaVencimientoGarantia,
        ID_Zona: a.zonaId,
        Precio_Compra: a.precioCompra,
        Ubicacion_Desc: a.ubicacion,
        Estado: a.estado,
      }),
    });

    const text = await res.text();
    const result: BackendResponse = JSON.parse(text);
    return result.status === "actualizado";
  } catch (error) {
    console.error("Error al editar activo f√≠sico:", error);
    return false;
  }
};

// üóëÔ∏è Eliminar activo f√≠sico
export const eliminarActivoFisico = async (id: string): Promise<boolean> => {
  try {
    const res = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        accion: "disable",
        id_activo_fisico: parseInt(id.replace("act-", "")),
      }),
    });

    const text = await res.text();
    const result: BackendResponse = JSON.parse(text);
    return result.status === "deshabilitado";
  } catch (error) {
    console.error("Error al eliminar activo f√≠sico:", error);
    return false;
  }
};
